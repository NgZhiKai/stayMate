[{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/AdminHotelPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[740,743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[740,743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1177,1180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1177,1180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link for navigation\nimport { fetchHotels } from '../services/hotelApi'; // Importing deleteHotelById\nimport { HotelData } from '../types/Hotels'; // Import HotelManagement type\n\nconst AdminHotelPage: React.FC = () => {\n  const [hotels, setHotels] = useState<HotelData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  \n  // Fetch the list of hotels when the component mounts\n  useEffect(() => {\n    const loadHotels = async () => {\n      try {\n        const hotelData = await fetchHotels();\n        setHotels(hotelData);\n        setLoading(false);\n      } catch (error: any) {\n        console.error('Error fetching hotels:', error);\n        setError('Failed to load hotels');\n        setLoading(false);\n      }\n    };\n\n    loadHotels();\n  }, []);  \n\n  // Handle delete hotel\n  const deleteHotel = async (id: number) => {\n    try {\n      await deleteHotel(id); // Call API to delete hotel\n      setHotels(hotels.filter((hotel) => hotel.id !== id)); // Remove the deleted hotel from state\n    } catch (error: any) {\n      console.error('Error deleting hotel:', error);\n      setError('Failed to delete hotel');\n    }\n  };\n\n  // Handle edit hotel (This could open a modal or navigate to an edit page)\n  const editHotel = (id: number) => {\n    // Redirect to an edit page or open a modal for editing hotel details\n    console.log(`Editing hotel with id: ${id}`);\n  };\n\n  return (\n    <div className=\"p-6\">\n      <h1 className=\"text-3xl font-bold text-gray-900\">Admin - Manage Hotels</h1>\n      \n      <Link to=\"/admin/hotels/create\" className=\"bg-green-500 text-white p-2 rounded mt-4 inline-block\">\n        Create New Hotel\n      </Link>\n\n      <div className=\"mt-6\">\n        {loading ? (\n          <p>Loading hotels...</p>\n        ) : error ? (\n          <p className=\"text-red-600\">{error}</p>\n        ) : hotels.length === 0 ? (\n          <p>No hotels available at the moment.</p>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n            {hotels.map((hotel) => (\n              <div key={hotel.id} className=\"border p-4 rounded-lg\">\n                <h2 className=\"text-xl font-semibold\">{hotel.name}</h2>\n                <p>{hotel.address}</p>\n                <p className=\"text-gray-500\">Rating: {hotel.averageRating || 'N/A'}</p>\n                <div className=\"mt-4 flex justify-between\">\n                  <button\n                    className=\"bg-blue-500 text-white py-1 px-4 rounded\"\n                    onClick={() => editHotel(hotel.id)}\n                  >\n                    Edit\n                  </button>\n                  <button\n                    className=\"bg-red-500 text-white py-1 px-4 rounded\"\n                    onClick={() => deleteHotel(hotel.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminHotelPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/AdminPaymentsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1213,1216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1213,1216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":36,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1402,1405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1402,1405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { CreditCard } from \"lucide-react\";\nimport { getAllPayments } from \"../services/paymentApi\";\nimport { Payment } from \"../types/Payment\";\nimport { getBookingById } from \"../services/bookingApi\";\n\nconst ITEMS_PER_PAGE = 5;\n\nconst AdminPaymentsPage: React.FC = () => {\n  const [payments, setPayments] = useState<Payment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [bookingDetails, setBookingDetails] = useState<{ [key: number]: any }>({});\n\n  useEffect(() => {\n    const fetchPayments = async () => {\n      try {\n        const data = await getAllPayments();\n        setPayments(data);\n\n        // Fetch booking details for each payment\n        const bookingDetailsPromises = data.map(async (payment) => {\n          const bookingData = await getBookingById(payment.bookingId);\n          return { bookingId: payment.bookingId, bookingData };\n        });\n\n        const bookingResults = await Promise.all(bookingDetailsPromises);\n\n        // Map booking details by payment's bookingId\n        const bookingMap: { [key: number]: any } = {};\n        bookingResults.forEach((result) => {\n          bookingMap[result.bookingId] = result.bookingData;\n        });\n        setBookingDetails(bookingMap);\n      } catch (err: any) {\n        setError(\"Failed to fetch payments.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPayments();\n  }, []);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const totalPages = Math.ceil(payments.length / ITEMS_PER_PAGE);\n  const currentPayments = payments.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n\n  const goToPage = (page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  if (loading) return <div className=\"p-6 text-white\">Loading payments...</div>;\n  if (error) return <div className=\"p-6 text-red-500\">{error}</div>;\n\n  return (\n    <div className=\"p-6 bg-gray-900 text-white min-h-full\">\n      <h1 className=\"text-2xl mb-4\">All Payments</h1>\n\n      {currentPayments.length === 0 ? (\n        <div>No payments found.</div>\n      ) : (\n        <ul className=\"space-y-4\">\n          {currentPayments.map((payment) => {\n            const booking = bookingDetails[payment.bookingId];\n            return (\n              <li\n                key={payment.id}\n                className=\"flex items-center justify-between gap-4 p-4 rounded bg-gray-800 text-sm\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <CreditCard size={20} />\n                  <span><strong>Booking:</strong> {payment.bookingId}</span>\n                  <span><strong>Amount:</strong> ${payment.amount.toFixed(2)}</span>\n                  <span className=\"flex items-center gap-1 text-sm\">\n                    <strong>Status:</strong>\n                    <span\n                      className={`text-xs font-semibold px-2 py-0.5 rounded-full ${\n                        payment.status === \"SUCCESS\"\n                          ? \"bg-green-200 text-green-800\"\n                          : payment.status === \"FAILURE\"\n                          ? \"bg-red-200 text-red-800\"\n                          : \"bg-yellow-200 text-yellow-800\"\n                      }`}\n                    >\n                      {payment.status}\n                    </span>\n                  </span>\n                </div>\n                <div className=\"text-xs text-gray-400\">\n                  {formatDate(payment.transactionDate)}\n                </div>\n                {booking && (\n                  <div className=\"mt-2 text-sm text-gray-400\">\n                    <p><strong>Check-In Date:</strong> {formatDate(booking.checkInDate)}</p>\n                    <p><strong>Check-Out Date:</strong> {formatDate(booking.checkOutDate)}</p>\n                  </div>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n\n      {totalPages > 1 && (\n        <div className=\"flex justify-center mt-6 space-x-2\">\n          <button\n            onClick={() => goToPage(currentPage - 1)}\n            disabled={currentPage === 1}\n            className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n          >\n            Prev\n          </button>\n\n          {Array.from({ length: totalPages }, (_, i) => i + 1)\n            .filter((page) => {\n              return (\n                page === 1 ||\n                page === totalPages ||\n                Math.abs(page - currentPage) <= 1\n              );\n            })\n            .reduce<(number | string)[]>((acc, page, index, pages) => {\n              if (index > 0 && (page as number) - (pages[index - 1] as number) > 1) {\n                acc.push('...');\n              }\n              acc.push(page);\n              return acc;\n            }, [])\n            .map((item, index) => (\n              <button\n                key={index}\n                onClick={() => typeof item === 'number' && goToPage(item)}\n                disabled={item === '...'}\n                className={`px-3 py-1 rounded ${\n                  item === currentPage\n                    ? 'bg-blue-600'\n                    : 'bg-gray-700 hover:bg-gray-600'\n                } ${item === '...' && 'cursor-default text-gray-400'}`}\n              >\n                {item}\n              </button>\n            ))}\n\n          <button\n            onClick={() => goToPage(currentPage + 1)}\n            disabled={currentPage === totalPages}\n            className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n          >\n            Next\n          </button>\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nexport default AdminPaymentsPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/BookedHotelsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/BookingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/BookmarkedHotelsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/CreateBookingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/CreateUpdateHotelPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[510,513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[510,513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport HotelForm from '../components/Hotel/HotelForm';\nimport { createHotel, fetchHotelById, updateHotel } from '../services/hotelApi';\nimport MessageModal from '../components/MessageModal'; // Make sure the path is correct\n\nconst CreateUpdateHotelPage: React.FC = () => {\n  const { id } = useParams<{ id?: string }>();\n  const navigate = useNavigate();\n  const [hotelData, setHotelData] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n  const [modalType, setModalType] = useState<'success' | 'error'>('success'); // Default to success\n\n  useEffect(() => {\n    if (id) {\n      const fetchHotelData = async () => {\n        try {\n          const data = await fetchHotelById(Number(id));\n          setHotelData(data);\n        } catch (error) {\n          console.error('Failed to fetch hotel data:', error);\n          setModalMessage('Failed to fetch hotel data.');\n          setModalType('error');\n          setIsModalOpen(true);\n        }\n      };\n      fetchHotelData();\n    }\n  }, [id]);\n\n  const handleSaveHotel = async (formData: FormData) => {\n    try {\n      if (id) {\n        await updateHotel(Number(id), formData);\n        setModalMessage('Hotel updated successfully!');\n        setModalType('success');\n      } else {\n        await createHotel(formData);\n        setModalMessage('Hotel created successfully!');\n        setModalType('success');\n      }\n  \n      setIsModalOpen(true);\n  \n      setTimeout(() => {\n        setIsModalOpen(false);\n        navigate('/');\n      }, 3000);\n    } catch (error) {\n      console.error('Failed to save hotel:', error);\n      setModalMessage('Failed to save hotel data.');\n      setModalType('error');\n      setIsModalOpen(true);\n    }\n  };  \n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\n      <div className=\"w-full max-w-4xl p-8 bg-white shadow-lg rounded-lg\">\n        <HotelForm onSave={handleSaveHotel} hotelData={hotelData} hotelId={Number(id)} />\n      </div>\n      <MessageModal \n        isOpen={isModalOpen} \n        onClose={closeModal} \n        message={modalMessage} \n        type={modalType} \n      />\n    </div>\n  );\n};\n\nexport default CreateUpdateHotelPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/HomePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1909,1912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1909,1912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'refreshNotifications'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [refreshNotifications]","fix":{"range":[2100,2102],"text":"[refreshNotifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport HotelCard from '../components/Hotel/HotelCard';\nimport SearchBar from '../components/SearchBar';\nimport { useNotificationContext } from \"../contexts/NotificationContext\";\nimport { fetchHotels } from '../services/hotelApi';\nimport { getReviewsForHotel } from '../services/ratingApi';\nimport { HotelData } from '../types/Hotels';\n\nconst HomePage: React.FC = () => {\n  const [hotels, setHotels] = useState<HotelData[]>([]);\n  const [filteredHotels, setFilteredHotels] = useState<HotelData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [hotelsPerPage] = useState<number>(8);\n  const { refreshNotifications } = useNotificationContext();\n\n  const userId = sessionStorage.getItem('userId');\n  const userRole = sessionStorage.getItem('role');\n  const isAdmin = userId && userRole === 'admin';\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    refreshNotifications();\n\n    const loadHotels = async () => {\n      try {\n        const hotelData = await fetchHotels();\n\n        if (Array.isArray(hotelData)) {\n          const hotelsWithRatings = await Promise.all(\n            hotelData.map(async (hotel) => {\n              const reviews = await getReviewsForHotel(hotel.id);\n              const averageRating =\n                reviews.length > 0\n                  ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length\n                  : 0;\n\n              return { ...hotel, averageRating };\n            })\n          );\n\n          setHotels(hotelsWithRatings);\n          setFilteredHotels(hotelsWithRatings);\n        } else {\n          throw new Error('Invalid data format received');\n        }\n\n        setLoading(false);\n      } catch (error: any) {\n        console.error('Error fetching hotels:', error);\n        setError('Failed to load hotels. Please try again.');\n        setLoading(false);\n      }\n    };\n\n    loadHotels();\n  }, []);\n\n  const handleSearch = (query: string) => {\n    if (!query.trim()) {\n      setFilteredHotels(hotels);\n      return;\n    }\n\n    const lowercasedQuery = query.toLowerCase();\n    const filtered = hotels.filter((hotel) =>\n      hotel.name.toLowerCase().includes(lowercasedQuery)\n    );\n    setFilteredHotels(filtered);\n  };\n\n  const handleCreateHotel = () => {\n    navigate('/create-hotel');\n  };\n\n  // Get the hotels to display on the current page\n  const indexOfLastHotel = currentPage * hotelsPerPage;\n  const indexOfFirstHotel = indexOfLastHotel - hotelsPerPage;\n  const currentHotels = filteredHotels.slice(indexOfFirstHotel, indexOfLastHotel);\n\n  // Handle page change\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n\n  // Handle next and previous page changes\n  const nextPage = () => {\n    if (currentPage < totalPages) setCurrentPage(currentPage + 1);\n  };\n\n  const prevPage = () => {\n    if (currentPage > 1) setCurrentPage(currentPage - 1);\n  };\n\n  // Calculate total pages\n  const totalPages = Math.ceil(filteredHotels.length / hotelsPerPage);\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"relative bg-white py-16 px-6 md:px-20 rounded-lg\">\n        {/* Centered Content */}\n        <div className=\"text-center max-w-3xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n            Welcome to StayMate hotel\n          </h1>\n          {/* Search Bar centered */}\n          <div className=\"w-full max-w-xl mx-auto\">\n            <SearchBar onSearch={handleSearch} />\n          </div>\n        </div>\n          {/* Create Hotel button - bottom right */}\n          {isAdmin && (\n            <button\n              onClick={handleCreateHotel}\n              className=\"fixed bottom-6 right-6 bg-blue-600 text-white px-4 py-3 rounded-full shadow-lg hover:bg-blue-700 hover:scale-105 transition-all z-50\"\n            >\n              Create Hotel\n            </button>\n          )}\n      </div>\n      <div>\n        <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Recommended Hotels</h2>\n\n        {loading ? (\n          <p>Loading hotels...</p>\n        ) : error ? (\n          <p className=\"text-red-600\">{error}</p>\n        ) : hotels.length === 0 ? (\n          <p>No hotels available at the moment.</p>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-2 gap-y-3\">\n              {currentHotels.map((hotel) => (\n                <HotelCard key={hotel.id} hotel={hotel} />\n              ))}\n            </div>\n\n            {/* Pagination with Arrows */}\n            <div className=\"flex justify-center mt-4 items-center gap-2\">\n              <button\n                onClick={prevPage}\n                disabled={currentPage === 1}\n                className={`px-4 py-2 rounded-md ${currentPage === 1 ? 'bg-gray-300 text-gray-800' : 'bg-blue-600 text-white'}`}\n              >\n                &lt;\n              </button>\n              <div className=\"flex gap-2\">\n                {Array.from({ length: totalPages }, (_, index) => (\n                  <button\n                    key={index + 1}\n                    onClick={() => paginate(index + 1)}\n                    className={`px-4 py-2 rounded-md ${\n                      currentPage === index + 1 ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-800'\n                    }`}\n                  >\n                    {index + 1}\n                  </button>\n                ))}\n              </div>\n              <button\n                onClick={nextPage}\n                disabled={currentPage === totalPages}\n                className={`px-4 py-2 rounded-md ${currentPage === totalPages ? 'bg-gray-300 text-gray-800' : 'bg-blue-600 text-white'}`}\n              >\n                &gt;\n              </button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/HotelDetailsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentUserId'. Either include it or remove the dependency array.","line":178,"column":6,"nodeType":"ArrayExpression","endLine":178,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [currentUserId, hotel]","fix":{"range":[5904,5911],"text":"[currentUserId, hotel]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { FaStar } from \"react-icons/fa\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { ClipLoader } from \"react-spinners\";\n\nimport ConfirmationModal from \"../components/ConfirmationModal\";\nimport HotelDetails from \"../components/Hotel/HotelDetails\";\nimport MessageModal from \"../components/MessageModal\";\nimport ReviewModal from \"../components/ReviewModal\";\n\nimport { deleteHotel, fetchHotelById } from \"../services/hotelApi\";\nimport { getReviewsForHotel } from \"../services/ratingApi\";\nimport { getUserInfo } from \"../services/userApi\";\nimport { addBookmark, getBookmarkedHotelIds, removeBookmark } from \"../services/bookmarkApi\";\n\nimport { HotelData } from \"../types/Hotels\";\nimport { Review } from \"../types/Review\";\n\nconst useHotelData = (id: string) => {\n  const [loading, setLoading] = useState(true);\n  const [hotel, setHotel] = useState<HotelData | null>(null);\n  const [reviews, setReviews] = useState<Review[]>([]);\n  const [userInfo, setUserInfo] = useState<{ [key: string]: { firstName: string; lastName: string } }>({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const hotelData = await fetchHotelById(Number(id));\n        const reviewsData = await getReviewsForHotel(Number(id));\n\n        const userInfoMap = await Promise.all(\n          reviewsData.map(async (review) => {\n            const user = await getUserInfo(String(review.userId));\n            return { userId: review.userId, userInfo: user.user };\n          })\n        ).then((data) =>\n          data.reduce((acc, { userId, userInfo }) => ({ ...acc, [userId]: userInfo }), {})\n        );\n\n        setHotel(hotelData);\n        setReviews(reviewsData);\n        setUserInfo(userInfoMap);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [id]);\n\n  return { loading, hotel, reviews, userInfo, setReviews, setUserInfo };\n};\n\nconst renderStars = (rating: number) => {\n  const fullStars = Math.floor(rating);\n  const halfStar = rating % 1 !== 0;\n\n  return (\n    <>\n      {[...Array(fullStars)].map((_, i) => (\n        <FaStar key={i} className=\"text-yellow-500\" />\n      ))}\n      {halfStar && <FaStar className=\"text-yellow-500 opacity-50\" />}\n    </>\n  );\n};\n\nconst HotelDetailsPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const { loading, hotel, reviews, userInfo, setReviews, setUserInfo } = useHotelData(id!);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [hotelToDelete, setHotelToDelete] = useState<number | null>(null);\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [messageModalOpen, setMessageModalOpen] = useState(false);\n  const [messageModalType, setMessageModalType] = useState<\"success\" | \"error\">(\"success\");\n  const [messageModalContent, setMessageModalContent] = useState(\"\");\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const currentUserId = Number(sessionStorage.getItem(\"userId\"));\n\n  const formatToAMPM = (timeString: string) => {\n    const [hours, minutes] = timeString.split(\":\").map(Number);\n    const period = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHour = hours % 12 || 12;\n    const formattedMinute = minutes < 10 ? `0${minutes}` : minutes;\n    return `${formattedHour}:${formattedMinute} ${period}`;\n  };\n\n  const getPricingRange = () => {\n    if (!hotel?.rooms?.length) return \"$0 - $0\";\n    const prices = hotel.rooms.map((room) => room.pricePerNight);\n    return `$${Math.min(...prices)} - $${Math.max(...prices)}`;\n  };\n\n  const handleDeleteHotel = (hotelId: number) => {\n    setHotelToDelete(hotelId);\n    setModalMessage(\"Are you sure you want to delete this hotel?\");\n    setIsModalOpen(true);\n  };\n\n  const confirmDeletion = async () => {\n    if (hotelToDelete) {\n      try {\n        await deleteHotel(hotelToDelete);\n        setIsModalOpen(false);\n        setMessageModalContent(\"Hotel deleted successfully!\");\n        setMessageModalType(\"success\");\n        setMessageModalOpen(true);\n        setTimeout(() => {\n          setMessageModalOpen(false);\n          navigate(\"/\");\n        }, 2000);\n      } catch (error) {\n        console.error(\"Error deleting hotel:\", error);\n        setIsModalOpen(false);\n        setMessageModalContent(\"There was an error deleting the hotel.\");\n        setMessageModalType(\"error\");\n        setMessageModalOpen(true);\n      }\n    }\n  };\n\n  const handleBookmarkToggle = async () => {\n    if (!currentUserId || !hotel) return;\n\n    if (isBookmarked) {\n      await removeBookmark(currentUserId, hotel.id);\n      setIsBookmarked(false);\n    } else {\n      await addBookmark(currentUserId, hotel.id);\n      setIsBookmarked(true);\n    }\n  };\n\n  const handleCloseReviewModal = () => {\n    setIsReviewModalOpen(false);\n  };\n\n  const handleReviewSubmitted = async (review: Review | null) => {\n    if (!review) return;\n  \n    // First, update the reviews state with the new review\n    setReviews((prev) => [...prev, review]);\n  \n    // Fetch the user info for the reviewer\n    try {\n      const user = await getUserInfo(String(review.userId));\n  \n      // Update the userInfo state with the new user info\n      setUserInfo((prevUserInfo) => ({\n        ...prevUserInfo,\n        [review.userId]: user.user,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching user info:\", error);\n    }\n  \n    // Close the review modal\n    handleCloseReviewModal();\n  };\n  \n\n  useEffect(() => {\n    const fetchBookmarks = async () => {\n      if (currentUserId && hotel) {\n        const result = await getBookmarkedHotelIds(currentUserId);\n        if (Array.isArray(result)) {\n          setIsBookmarked(result.includes(hotel.id));\n        }\n      }\n    };\n\n    fetchBookmarks();\n  }, [hotel]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        <ClipLoader size={50} color=\"#2563EB\" />\n      </div>\n    );\n  }\n\n  if (!hotel) {\n    return <div className=\"text-center py-10\">Hotel not found.</div>;\n  }\n\n  return (\n    <div className=\"p-6\">\n      <HotelDetails\n        hotel={hotel}\n        reviews={reviews}\n        userInfo={userInfo}\n        getPricingRange={getPricingRange}\n        formatToAMPM={formatToAMPM}\n        renderStars={renderStars}\n        isBookmarked={isBookmarked}\n        setIsBookmarked={setIsBookmarked}\n        handleBookmarkToggle={handleBookmarkToggle}\n        handleDeleteHotel={handleDeleteHotel}\n        userId={currentUserId!}\n        setIsReviewModalOpen={setIsReviewModalOpen}\n      />\n      <ConfirmationModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onConfirm={confirmDeletion}\n        message={modalMessage}\n      />\n      <MessageModal\n        isOpen={messageModalOpen}\n        onClose={() => setMessageModalOpen(false)}\n        message={messageModalContent}\n        type={messageModalType}\n      />\n      <ReviewModal\n        isOpen={isReviewModalOpen}\n        onClose={handleCloseReviewModal}\n        hotelId={hotel.id}\n        userId={Number(currentUserId)}\n        onReviewSubmitted={handleReviewSubmitted}\n      />\n    </div>\n  );\n};\n\nexport default HotelDetailsPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1328,1331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1328,1331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useContext, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport LoginForm from \"../components/User/LoginForm\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { loginUser } from \"../services/userApi\";\nimport { LoginData } from \"../types/User\";\n\nconst LoginPage: React.FC = () => {\n  const [loginData, setLoginData] = useState<LoginData>({\n    email: \"\",\n    password: \"\",\n    role: \"customer\", // Default to 'customer' role\n  });\n  const [error, setError] = useState<string | null>(null);\n  const { login } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  // Handle input changes for email, password, and role\n  const handleLoginChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setLoginData((prevData) => ({ ...prevData, [name]: value }));\n  };\n\n  // Handle login logic (authentication)\n  const handleLogin = async (loginData: LoginData) => {\n    if (!loginData.email || !loginData.password) {\n      setError(\"Please enter both email and password.\");\n      return;\n    }\n  \n    try {\n      const { user, token } = await loginUser(loginData); // Your login API call\n      login(token, loginData.role, user.id);\n\n      setError(null);\n      navigate(\"/\"); // Redirect after successful login\n    } catch (err: any) {\n      setError(err.message || \"An error occurred during login. Please try again.\");\n    }\n  };  \n\n  return (\n    <div className=\"flex justify-center items-center min-h-full bg-gray-100\">\n      <div className=\"w-full max-w-screen-md p-6\">\n        {/* Login Form - Always displayed with the current loginData */}\n        <LoginForm\n          onLogin={handleLogin}\n          error={error}\n          loginData={loginData}\n          handleChange={handleLoginChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/LogoutPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/ManageBookingsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1456,1459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1456,1459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2140,2143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2140,2143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { cancelBooking, getAllBookings } from '../services/bookingApi';\nimport { fetchHotelById } from '../services/hotelApi';\nimport { getUserInfo } from '../services/userApi';\nimport { DetailedBooking } from '../types/Booking';\n\nconst ITEMS_PER_PAGE = 8;\n\nconst ManageBookingsPage: React.FC = () => {\n  const [bookings, setBookings] = useState<DetailedBooking[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [bookingsPerPage] = useState(ITEMS_PER_PAGE); // Changed from 10 to 5\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchBookings = async () => {\n      try {\n        const result = await getAllBookings(); // Fetch bookings from the API\n        const bookingsWithDetails = await Promise.all(result.bookings.map(async (booking) => {\n          // Fetch user details\n          const userInfo = await getUserInfo(String(booking.userId));\n          // Fetch hotel details\n          const hotelInfo = await fetchHotelById(booking.hotelId);\n\n          return {\n            ...booking,\n            userFirstName: userInfo.user.firstName,\n            userLastName: userInfo.user.lastName,\n            hotelName: hotelInfo.name,\n            hotelCheckInTime: hotelInfo.checkIn || 'N/A',\n            hotelCheckOutTime: hotelInfo.checkOut || 'N/A'\n          };\n        }));\n\n        setBookings(bookingsWithDetails);\n        setError('');\n      } catch (err: any) {\n        setError(err.message || 'Failed to load bookings');\n      }\n    };\n    fetchBookings();\n  }, []);\n\n  const indexOfLastBooking = currentPage * bookingsPerPage;\n  const indexOfFirstBooking = indexOfLastBooking - bookingsPerPage;\n\n  const currentBookings = bookings.slice(indexOfFirstBooking, indexOfLastBooking);\n\n  const totalPages = Math.ceil(bookings.length / bookingsPerPage);\n\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n\n  const handleCancel = async (bookingId: number) => {\n    try {\n      await cancelBooking(bookingId);\n      setBookings((prevBookings) => prevBookings.filter((booking) => booking.id !== bookingId));\n    } catch (err: any) {\n      setError(err.message || 'Failed to cancel booking');\n    }\n  };\n\n  return (\n    <div className=\"p-6 bg-gray-900 text-white min-h-full relative\">\n      <h1 className=\"text-2xl mb-4\">Manage Bookings</h1>\n\n      {error && <p className=\"text-red-600 text-center\">{error}</p>}\n\n      {bookings.length === 0 ? (\n        <div>No bookings found.</div>\n      ) : (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n          {currentBookings.map((booking) => (\n            <div\n              key={booking.id}\n              className={`flex flex-col p-3 rounded-lg ${booking.status === 'CANCELLED' ? 'bg-gray-700' : 'bg-gray-800'}`}\n            >\n              <h2 className=\"text-lg font-semibold\">Booking ID: {booking.id}</h2>\n              <p className=\"text-sm\">User: {booking.userFirstName} {booking.userLastName}</p>\n              <p className=\"text-sm\">Hotel: {booking.hotelName}</p>\n              <p className=\"text-sm\">\n                Check-in: {new Date(booking.checkInDate).toLocaleDateString()} at {booking.hotelCheckInTime?.slice(0, 5)}\n              </p>\n              <p className=\"text-sm\">\n                Check-out: {new Date(booking.checkOutDate).toLocaleDateString()} at {booking.hotelCheckOutTime?.slice(0, 5)}\n              </p>\n              <p className=\"text-sm\">\n                <span\n                  className={`font-semibold py-1 px-3 rounded-full inline-block ${\n                    booking.status === 'CONFIRMED'\n                      ? 'bg-green-100 text-green-600'\n                      : booking.status === 'CANCELLED'\n                      ? 'bg-red-100 text-red-600'\n                      : 'bg-yellow-100 text-yellow-600'\n                  }`}\n                >\n                  {booking.status}\n                </span>\n              </p>\n\n              {booking.status !== 'CANCELLED' && (\n                <button\n                  onClick={() => handleCancel(booking.id)}\n                  className=\"bg-red-500 text-white px-3 py-1 mt-2 rounded transition-all duration-300 transform hover:bg-red-400 hover:scale-105\"\n                >\n                  Cancel\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Pagination Controls */}\n      {totalPages > 1 && (\n      <div className=\"flex justify-center mt-6 space-x-2\">\n        <button\n          onClick={() => paginate(currentPage - 1)}\n          disabled={currentPage === 1}\n          className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n        >\n          Prev\n        </button>\n\n        {Array.from({ length: totalPages }, (_, i) => i + 1)\n          .filter((page) => {\n            return (\n              page === 1 ||\n              page === totalPages ||\n              Math.abs(page - currentPage) <= 1\n            );\n          })\n          .reduce<(number | string)[]>((acc, page, index, pages) => {\n            if (index > 0 && (page as number) - (pages[index - 1] as number) > 1) {\n              acc.push('...');\n            }\n            acc.push(page);\n            return acc;\n          }, [])\n          .map((item, index) => (\n            <button\n              key={index}\n              onClick={() => typeof item === 'number' && paginate(item)}\n              disabled={item === '...'}\n              className={`px-3 py-1 rounded ${\n                item === currentPage\n                  ? 'bg-blue-600'\n                  : 'bg-gray-700 hover:bg-gray-600'\n              } ${item === '...' && 'cursor-default text-gray-400'}`}\n            >\n              {item}\n            </button>\n          ))}\n\n        <button\n          onClick={() => paginate(currentPage + 1)}\n          disabled={currentPage === totalPages}\n          className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n        >\n          Next\n        </button>\n      </div>\n    )}\n\n    </div>\n  );\n};\n\nexport default ManageBookingsPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/ManageUsersPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1240,1243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1240,1243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2404,2407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2404,2407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":86,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3783,3786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3783,3786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { getAllUsers, deleteUser, updateUser, registerUser } from '../services/userApi';\nimport { User, RegisterData } from '../types/User';\nimport UserModal from '../components/UserModal';\nimport { Edit, Trash, User as UserIcon, Shield as AdminIcon } from 'lucide-react';\nimport MessageModal from '../components/MessageModal';\n\ntype RegisterResponse = {\n  message?: string;\n  data: User;\n};\n\ntype UpdateResponse = {\n  message?: string;\n  user: User;\n};\n\nconst ITEMS_PER_PAGE = 6;\n\nconst ManageUsers: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [error, setError] = useState('');\n  const [messageModalOpen, setMessageModalOpen] = useState(false);\n  const [messageType, setMessageType] = useState<'success' | 'error'>('success');\n  const [messageContent, setMessageContent] = useState('');\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const result = await getAllUsers();\n        setUsers(result.users);\n        setError('');\n      } catch (err: any) {\n        setError(err.message || 'Failed to load users');\n        setTimeout(() => setError(''), 5000); // Hide error after 5 seconds\n      }\n    };\n    fetchUsers();\n  }, []);\n\n  const totalPages = Math.ceil((users.length || 1) / ITEMS_PER_PAGE);\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const currentUsers = users.slice(startIndex, startIndex + ITEMS_PER_PAGE);\n\n  const goToPage = (page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  const handleEdit = (user: User) => {\n    setCurrentUser(user);\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = async (userId: number) => {\n    try {\n      await deleteUser(String(userId));\n  \n      setUsers((prev) => {\n        const updatedUsers = prev.filter((u) => u.id !== userId);\n        const newTotalPages = Math.ceil(updatedUsers.length / ITEMS_PER_PAGE);\n        if (currentPage > newTotalPages) {\n          setCurrentPage(newTotalPages || 1);\n        }\n        return updatedUsers;\n      });\n  \n      setMessageType('success');\n      setMessageContent('User deleted successfully!');\n      setMessageModalOpen(true);\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete user');\n      setMessageType('error');\n      setMessageContent(err.message || 'Failed to delete user');\n      setMessageModalOpen(true);\n    }\n  };  \n\n  const handleSubmit = async (userData: User | RegisterData) => {\n    try {\n      if (userData.id === 0) {\n        const { id, ...newUserData } = userData;\n        const response: RegisterResponse = await registerUser(newUserData as RegisterData);\n\n        if (response?.data) {\n          setUsers((prev) => [...prev, response.data]);\n          setIsModalOpen(false);\n          setCurrentUser(null);\n\n          setMessageType('success');\n          setMessageContent(response.message || 'User added successfully!');\n          setMessageModalOpen(true);\n\n          setTimeout(() => setMessageModalOpen(false), 3000);\n        }\n      } else {\n        const response: UpdateResponse = await updateUser(String(userData.id), userData);\n\n        if (response?.user) {\n          setUsers((prev) =>\n            prev.map((u) => (u.id === userData.id ? response.user : u))\n          );\n          setIsModalOpen(false);\n          setCurrentUser(null);\n\n          setMessageType('success');\n          setMessageContent('User updated successfully!');\n          setMessageModalOpen(true);\n\n          setTimeout(() => setMessageModalOpen(false), 3000);\n        }\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to submit user');\n      setMessageType('error');\n      setMessageContent(err.message || 'Something went wrong. Please try again.');\n      setMessageModalOpen(true);\n    }\n  };\n\n  const handleAddUser = () => {\n    setCurrentUser(null);\n    setIsModalOpen(true);\n  };\n\n  return (\n    <div className=\"p-8 bg-gray-900 text-white min-h-screen relative\">\n      <h1 className=\"text-4xl font-semibold mb-8 text-center\">Admin - Manage Users</h1>\n\n      <button\n        onClick={handleAddUser}\n        className=\"mb-4 px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-all transform hover:scale-110 absolute top-8 right-8\"\n      >\n        Add User\n      </button>\n\n      {users.length === 0 ? (\n        <p className=\"text-center text-lg\">No users found.</p>\n      ) : (\n        <ul className=\"max-w-5xl mx-auto grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {currentUsers.map((user) => (\n            <li\n              key={user.id}\n              className=\"flex flex-col items-center gap-4 p-4 bg-gray-800 rounded-md shadow-md hover:shadow-xl transition-all duration-300\"\n            >\n              <div className=\"flex items-center gap-3 text-center w-full\">\n                <div className=\"flex items-center gap-2\">\n                  {user.role === 'ADMIN' ? (\n                    <AdminIcon size={18} className=\"text-blue-500\" />\n                  ) : (\n                    <UserIcon size={18} className=\"text-green-500\" />\n                  )}\n                </div>\n                <p className=\"font-semibold text-lg text-white flex-shrink-0\">\n                  {user.firstName} {user.lastName}\n                </p>\n                <div className=\"ml-auto flex gap-3\">\n                  <button\n                    onClick={() => handleEdit(user)}\n                    className=\"p-2 bg-green-600 hover:bg-green-500 rounded-md transform hover:scale-110 transition-all\"\n                    title=\"Edit\"\n                  >\n                    <Edit size={18} />\n                  </button>\n                  <button\n                    onClick={() => handleDelete(user.id)}\n                    className=\"p-2 bg-red-600 hover:bg-red-500 rounded-md transform hover:scale-110 transition-all\"\n                    title=\"Delete\"\n                  >\n                    <Trash size={18} />\n                  </button>\n                </div>\n              </div>\n              <p className=\"text-gray-400\">{user.email}</p>\n              <p className=\"text-gray-400\">Phone: {user.phoneNumber}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {/* Pagination Controls */}\n      {totalPages > 1 && (\n        <div className=\"flex justify-center mt-6 space-x-2\">\n          <button\n            onClick={() => goToPage(currentPage - 1)}\n            disabled={currentPage === 1}\n            className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n          >\n            Prev\n          </button>\n\n          {Array.from({ length: totalPages }, (_, i) => i + 1)\n            .filter((page) => {\n              return (\n                page === 1 || \n                page === totalPages || \n                Math.abs(page - currentPage) <= 1\n              );\n            })\n            .reduce((acc: (number | string)[], page, index, pages) => {\n              if (index > 0 && (page as number) - (pages[index - 1] as number) > 1) {\n                acc.push('...');\n              }\n              acc.push(page);\n              return acc;\n            }, [])\n            .map((item, index) => (\n              <button\n                key={index}\n                onClick={() => typeof item === 'number' && goToPage(item)}\n                disabled={item === '...'}\n                className={`px-3 py-1 rounded ${\n                  item === currentPage ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'\n                } ${item === '...' && 'cursor-default text-gray-400'}`}\n              >\n                {item}\n              </button>\n            ))}\n\n          <button\n            onClick={() => goToPage(currentPage + 1)}\n            disabled={currentPage === totalPages}\n            className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n          >\n            Next\n          </button>\n        </div>\n      )}\n\n\n      <UserModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setCurrentUser(null);\n        }}\n        onSubmit={handleSubmit}\n        currentUser={currentUser}\n      />\n\n      <MessageModal\n        isOpen={messageModalOpen}\n        onClose={() => setMessageModalOpen(false)}\n        type={messageType}\n        message={messageContent || error}\n      />\n    </div>\n  );\n};\n\nexport default ManageUsers;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/MyPaymentsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[844,847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[844,847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreditCard } from \"lucide-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { getPaymentsByUserId } from \"../services/paymentApi\";\nimport { Payment } from \"../types/Payment\";\n\nconst ITEMS_PER_PAGE = 5;\n\nconst MyPaymentsPage: React.FC = () => {\n  const [payments, setPayments] = useState<Payment[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPayments = async () => {\n      const storedUserId = sessionStorage.getItem(\"userId\");\n      if (!storedUserId) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const userId = Number(storedUserId);\n        setLoading(true);\n        const data = await getPaymentsByUserId(userId);\n        setPayments(Array.isArray(data) ? data : []);\n      } catch (err: any) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPayments();\n  }, []);\n\n  const totalPages = Math.ceil(payments.length / ITEMS_PER_PAGE);\n  const currentPayments = payments.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n  const prevPage = () => currentPage > 1 && setCurrentPage(currentPage - 1);\n  const nextPage = () => currentPage < totalPages && setCurrentPage(currentPage + 1);\n\n  if (loading) return <div className=\"p-6 text-white\">Loading payments...</div>;\n\n  return (\n    <div className=\"bg-gray-900 min-h-full py-8 px-4 sm:px-6 lg:px-12\">\n      <h2 className=\"text-gray-100 text-3xl font-semibold text-center mb-8\">My Payments</h2>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {payments.length === 0 && !loading ? (\n          <p className=\"text-gray-500 text-center col-span-full\">No payments found.</p>\n        ) : (\n          currentPayments.map((payment) => (\n            <div\n              key={payment.id}\n              className=\"p-6 rounded-xl bg-gradient-to-br from-gray-800 to-gray-700 shadow-lg text-gray-200 flex flex-col gap-4\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <CreditCard size={28} className=\"text-blue-400\" />\n                <div>\n                  <div className=\"text-lg font-semibold\">Booking #{payment.bookingId}</div>\n                  <div className=\"text-sm text-gray-400\">{new Date(payment.transactionDate).toLocaleString()}</div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between text-base font-medium\">\n                <span>Amount</span>\n                <span className=\"text-blue-300\">${payment.amount.toFixed(2)}</span>\n              </div>\n\n              <div className=\"flex justify-between text-base font-medium\">\n                <span>Status</span>\n                <span\n                  className={`text-xs font-bold px-3 py-1 rounded-full ${\n                    payment.status === \"SUCCESS\"\n                      ? \"bg-green-200 text-green-800\"\n                      : payment.status === \"FAILURE\"\n                      ? \"bg-red-200 text-red-800\"\n                      : \"bg-yellow-200 text-yellow-800\"\n                  }`}\n                >\n                  {payment.status}\n                </span>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n\n      {payments.length > 0 && (\n        <div className=\"flex justify-center mt-6 items-center gap-2\">\n          <button\n            onClick={prevPage}\n            disabled={currentPage === 1}\n            className={`px-4 py-2 rounded-md ${\n              currentPage === 1\n                ? \"bg-gray-300 text-gray-800 cursor-not-allowed\"\n                : \"bg-blue-600 text-white hover:bg-blue-500 transition\"\n            }`}\n          >\n            &lt;\n          </button>\n\n          {Array.from({ length: totalPages }, (_, index) => (\n            <button\n              key={index + 1}\n              onClick={() => paginate(index + 1)}\n              className={`px-4 py-2 rounded-md ${\n                currentPage === index + 1\n                  ? \"bg-blue-600 text-white\"\n                  : \"bg-gray-300 text-gray-800 hover:bg-gray-200 transition\"\n              }`}\n            >\n              {index + 1}\n            </button>\n          ))}\n\n          <button\n            onClick={nextPage}\n            disabled={currentPage === totalPages}\n            className={`px-4 py-2 rounded-md ${\n              currentPage === totalPages\n                ? \"bg-gray-300 text-gray-800 cursor-not-allowed\"\n                : \"bg-blue-600 text-white hover:bg-blue-500 transition\"\n            }`}\n          >\n            &gt;\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MyPaymentsPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/NearMePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/NotificationPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":33,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":49,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bell, CheckCircle } from \"lucide-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNotificationContext } from \"../contexts/NotificationContext\";\nimport NotificationApi from \"../services/notificationApi\";\n\nconst ITEMS_PER_PAGE = 6;\n\nconst NotificationsPage: React.FC = () => {\n  const [userId, setUserId] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [markingId, setMarkingId] = useState<number | null>(null);\n\n  // Use the notification context\n  const { notifications, refreshNotifications } = useNotificationContext();\n\n  useEffect(() => {\n    const storedUserId = sessionStorage.getItem(\"userId\");\n    if (storedUserId) {\n      setUserId(Number(storedUserId));\n    } else {\n      setError(\"User not logged in.\");\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (userId !== null) {\n      const fetchNotifications = async () => {\n        try {\n          await NotificationApi.getNotificationsByUserId(userId);\n        } catch (err) {\n          setError(\"Failed to load notifications.\");\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchNotifications();\n    }\n  }, [userId]);\n\n  const markAsRead = async (notificationId: number) => {\n    try {\n      setMarkingId(notificationId);\n      await NotificationApi.markNotificationAsRead(notificationId);\n      // After marking as read, refresh notifications\n      await refreshNotifications();\n    } catch (err) {\n      setError(\"Failed to mark notification as read.\");\n    } finally {\n      setMarkingId(null);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      // Mark all unread notifications as read\n      const unreadNotifications = notifications.filter((n) => !n.isread);\n      for (const notification of unreadNotifications) {\n        await NotificationApi.markNotificationAsRead(notification.notificationId);\n      }\n      await refreshNotifications(); // Refresh the notifications list\n    } catch (err) {\n      setError(\"Failed to mark all notifications as read.\");\n    }\n  };\n\n  const sortedNotifications = [...notifications].sort((a, b) => {\n    if (a.isread === b.isread) {\n      // Both read or both unread → sort by createdAt descending\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }\n    // Unread first\n    return a.isread ? 1 : -1;\n  });\n  \n  const totalPages = Math.ceil(sortedNotifications.length / ITEMS_PER_PAGE);\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const currentNotifications = sortedNotifications.slice(\n    startIndex,\n    startIndex + ITEMS_PER_PAGE\n  );\n  \n\n  const goToPage = (page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n    }\n  };\n\n  if (loading) return <div>Loading notifications...</div>;\n  if (error) return <div>{error}</div>;\n\n  return (\n    <div className=\"relative p-6 bg-gray-900 text-white min-h-full\">\n      {/* Title & Action */}\n      <div className=\"mb-4\">\n        <h1 className=\"text-2xl font-semibold\">Notifications</h1>\n      </div>\n  \n      {/* Mark All as Read Button */}\n      <button\n        onClick={markAllAsRead}\n        className=\"absolute top-6 right-6 px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-500 hover:scale-105 active:scale-95 transition-all transform focus:outline-none focus:ring-2 focus:ring-blue-400 flex items-center\"\n      >\n        <CheckCircle size={20} className=\"mr-2 text-white\" />\n        Mark All as Read\n      </button>\n\n\n      {/* Notification List */}\n      {currentNotifications.length === 0 ? (\n        <div className=\"text-gray-400 text-center mt-20 text-sm\">\n          You have no notifications.\n        </div>\n      ) : (\n        <ul className=\"space-y-3\">\n          {currentNotifications.map((notification) => (\n            <li\n              key={notification.notificationId}\n              className={`flex items-start gap-2 p-3 rounded-lg shadow-sm transition ${\n                notification.isread ? \"bg-gray-800\" : \"bg-gray-700\"\n              }`}\n            >\n              <Bell size={18} className=\"mt-0.5 text-yellow-400\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm\">{notification.message}</p>\n                <p className=\"text-xs text-gray-400 mt-0.5\">\n                  {new Date(notification.createdAt).toLocaleString()}\n                </p>\n              </div>\n              {!notification.isread && (\n                <button\n                  onClick={() => markAsRead(notification.notificationId)}\n                  disabled={markingId === notification.notificationId}\n                  className=\"text-green-500 hover:text-green-400 disabled:opacity-50 transition\"\n                  aria-label=\"Mark as read\"\n                >\n                  <CheckCircle size={16} />\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n  \n      {/* Pagination Controls */}\n      {totalPages > 1 && (\n        <div className=\"flex justify-center mt-6 space-x-1 text-sm\">\n          <button\n            onClick={() => goToPage(currentPage - 1)}\n            disabled={currentPage === 1}\n            className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n          >\n            Prev\n          </button>\n          {Array.from({ length: totalPages }, (_, i) => (\n            <button\n              key={i + 1}\n              onClick={() => goToPage(i + 1)}\n              className={`px-3 py-1 rounded ${\n                currentPage === i + 1\n                  ? \"bg-blue-600\"\n                  : \"bg-gray-700 hover:bg-gray-600\"\n              }`}\n            >\n              {i + 1}\n            </button>\n          ))}\n          <button\n            onClick={() => goToPage(currentPage + 1)}\n            disabled={currentPage === totalPages}\n            className=\"px-3 py-1 bg-gray-700 hover:bg-gray-600 rounded disabled:opacity-50\"\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );  \n  \n};\n\nexport default NotificationsPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/PaymentPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1085,1088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1085,1088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1148,1151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1148,1151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3546,3549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3546,3549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport MessageModal from \"../components/MessageModal\";\nimport { useNotificationContext } from \"../contexts/NotificationContext\";\nimport { getBookingById } from \"../services/bookingApi\";\nimport { fetchHotelById } from \"../services/hotelApi\";\nimport { createAndProcessPayment, getPaymentsByBookingId } from \"../services/paymentApi\";\n\nconst PaymentPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { bookingId } = location.state || {};\n\n  const { refreshNotifications } = useNotificationContext();\n\n  const [cardNumber, setCardNumber] = useState(\"\");\n  const [expiry, setExpiry] = useState(\"\");\n  const [cvv, setCvv] = useState(\"\");\n  const [amountPaidNow, setAmountPaidNow] = useState<number>(0);\n  const [amountAlreadyPaid, setAmountAlreadyPaid] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [amountError, setAmountError] = useState(\"\");\n\n  const [bookingDetails, setBookingDetails] = useState<any>(null);\n  const [hotelDetails, setHotelDetails] = useState<any>(null);\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalType, setModalType] = useState<\"success\" | \"error\">(\"success\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!bookingId) {\n        navigate(\"/bookings\");\n        return;\n      }\n\n      try {\n        const booking = await getBookingById(bookingId);\n        setBookingDetails(booking);\n\n        const hotel = await fetchHotelById(booking.hotelId);\n        setHotelDetails(hotel);\n\n        try {\n          const payments = await getPaymentsByBookingId(bookingId);\n          const totalPaid = payments?.length\n            ? payments.reduce((sum, payment) => sum + Number(payment.amountPaid), 0)\n            : 0;\n          setAmountAlreadyPaid(totalPaid);\n        } catch (paymentError) {\n          console.warn(\"No payments found or error retrieving payments:\", paymentError);\n          setAmountAlreadyPaid(0);\n        }\n      } catch (error) {\n        console.error(\"Error fetching booking/hotel info:\", error);\n        navigate(\"/bookings\");\n      }\n    };\n\n    fetchData();\n  }, [bookingId, navigate]);\n\n  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number(e.target.value);\n    setAmountPaidNow(value);\n\n    if (value < 0) {\n      setAmountError(\"Amount cannot be negative.\");\n    } else if (value > remainingAmount) {\n      setAmountError(\"Amount exceeds the outstanding balance.\");\n    } else if (value === 0) {\n      setAmountError(\"Amount must be greater than zero.\");\n    } else {\n      setAmountError(\"\");\n    }\n  };\n\n  const handlePayment = async () => {\n    if (!bookingId || !amountPaidNow || !cardNumber || !expiry || !cvv || amountError) {\n      setModalType(\"error\");\n      setModalMessage(\"Please fill in all fields correctly.\");\n      setModalOpen(true);\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const paymentRequest = {\n        bookingId,\n        amount: amountPaidNow,\n      };\n\n      await createAndProcessPayment(paymentRequest, \"CREDIT_CARD\");\n\n      setModalType(\"success\");\n      setModalMessage(\"Payment successful!\");\n      setModalOpen(true);\n\n      // Refresh notifications after payment success\n      refreshNotifications();\n\n      setTimeout(() => {\n        setModalOpen(false);\n        navigate(\"/bookings\");\n      }, 2000);\n    } catch (error: any) {\n      console.error(\"Payment error:\", error);\n      setModalType(\"error\");\n      setModalMessage(`Payment failed: ${error.message}`);\n      setModalOpen(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!bookingDetails || !hotelDetails) {\n    return <div className=\"text-center mt-10\">Loading booking details...</div>;\n  }\n\n  const totalAmount = bookingDetails.totalAmount;\n  const remainingAmount = totalAmount - amountAlreadyPaid;\n\n  return (\n    <div className=\"flex justify-center items-center min-h-full bg-gray-100 py-12 px-4\">\n      <div className=\"w-full max-w-lg p-8 bg-white rounded-xl shadow-lg space-y-6\">\n        {/* Payment Header */}\n        <h2 className=\"text-3xl font-bold text-gray-800\">Hotel Payment</h2>\n  \n        {/* Booking Summary */}\n        <div className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Booking Summary</h3>\n          <div className=\"grid grid-cols-2 gap-y-3 text-sm text-gray-700\">\n            <div className=\"font-medium\">Hotel:</div>\n            <div className=\"text-gray-800\">{hotelDetails.name}</div>\n  \n            <div className=\"font-medium\">Total Amount:</div>\n            <div className=\"text-gray-800\">${totalAmount.toFixed(2)}</div>\n  \n            <div className=\"font-medium\">Already Paid:</div>\n            <div className=\"text-gray-800\">${amountAlreadyPaid.toFixed(2)}</div>\n  \n            <div className=\"font-medium text-red-600\">Outstanding:</div>\n            <div className=\"text-red-600 font-semibold\">${remainingAmount.toFixed(2)}</div>\n          </div>\n        </div>\n  \n        {/* Amount You’re Paying Now */}\n        <div>\n          <label className=\"block text-gray-700 font-medium mb-2\">Amount You’re Paying Now</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter payment amount\"\n            value={amountPaidNow}\n            onChange={handleAmountChange}\n            className=\"w-full p-4 bg-gray-100 border border-gray-300 rounded-lg text-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n          />\n          {amountError && <p className=\"text-red-600 text-sm mt-2\">{amountError}</p>}\n        </div>\n  \n        {/* Card Details Section */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-xl font-semibold text-gray-800\">Card Details</h3>\n  \n          <input\n            type=\"text\"\n            placeholder=\"Card Number\"\n            value={cardNumber}\n            onChange={(e) => setCardNumber(e.target.value)}\n            className=\"w-full p-4 bg-gray-100 border border-gray-300 rounded-lg text-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n          />\n  \n          <div className=\"grid grid-cols-2 gap-4\">\n            <input\n              type=\"text\"\n              placeholder=\"MM/YY\"\n              value={expiry}\n              onChange={(e) => setExpiry(e.target.value)}\n              className=\"w-full p-4 bg-gray-100 border border-gray-300 rounded-lg text-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"CVV\"\n              value={cvv}\n              onChange={(e) => setCvv(e.target.value)}\n              className=\"w-full p-4 bg-gray-100 border border-gray-300 rounded-lg text-lg text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n            />\n          </div>\n        </div>\n  \n        {/* Payment Button */}\n        <button\n          onClick={handlePayment}\n          disabled={isLoading || !!amountError}\n          className=\"w-full py-3 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-all transform hover:scale-105\"\n        >\n          {isLoading ? \"Processing...\" : \"Confirm Payment\"}\n        </button>\n  \n        {/* Modal for Payment Feedback */}\n        <MessageModal\n          isOpen={modalOpen}\n          onClose={() => setModalOpen(false)}\n          message={modalMessage}\n          type={modalType}\n        />\n      </div>\n    </div>\n  );\n  \n};\n\nexport default PaymentPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/RegisterPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1503,1506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1503,1506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { RegisterData } from \"../types/User\";\nimport RegisterForm from \"../components/User/RegisterForm\";\nimport { registerUser } from \"../services/userApi\";\n\nconst RegisterPage: React.FC = () => {\n  const [registerData, setRegisterData] = useState<RegisterData>({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    phoneNumber: \"\",\n    role: \"CUSTOMER\", // Default role set to uppercase\n  });\n  const [confirmPassword, setConfirmPassword] = useState(\"\"); // State for confirm password\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  const handleRegisterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setRegisterData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleRegister = async (registerData: RegisterData) => {\n    if (!registerData.firstName || !registerData.lastName || !registerData.email || !registerData.password || !registerData.phoneNumber) {\n      setError(\"Please fill in all fields.\");\n      return;\n    }\n\n    // Check if the passwords match\n    if (registerData.password !== confirmPassword) {\n      setError(\"Passwords do not match.\");\n      return;\n    }\n\n    try {\n      const data = await registerUser(registerData);\n\n      if (data) {\n        setError(null);\n        navigate(\"/login\");\n      }\n    } catch (err: any) {\n      setError(err.message || \"An error occurred during registration. Please try again.\");\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center items-center min-h-full bg-gray-100\">\n      <div className=\"w-full max-w-screen-md p-6\">\n        <RegisterForm\n          onRegister={handleRegister}\n          error={error}\n          registerData={registerData}\n          handleChange={handleRegisterChange}\n          confirmPassword={confirmPassword} // Pass confirmPassword state\n          setConfirmPassword={setConfirmPassword} // Pass setConfirmPassword function\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/UserAccountSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/Pages/VerficationPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[967,970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[967,970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { verifyUser } from \"../services/userApi\";\n\nconst VerifyEmailPage: React.FC = () => {\n  const [message, setMessage] = useState<string | null>(null);\n  const [isSuccess, setIsSuccess] = useState<boolean | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [tokenInput, setTokenInput] = useState<string>(\"\");\n  const navigate = useNavigate();\n\n  const handleVerify = async () => {\n    if (!tokenInput.trim()) {\n      setIsSuccess(false);\n      setMessage(\"Please enter a valid verification token.\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await verifyUser(tokenInput);\n      console.log(\"API response:\", response);\n      setIsSuccess(true);\n      setMessage(\"Your email has been successfully verified! Redirecting to login...\");\n\n      setTimeout(() => navigate(\"/login\"), 5000);\n    } catch (error: any) {\n      console.error(\"Verification error:\", error);\n      setIsSuccess(false);\n      setMessage(error.message || \"Verification failed. The token may be invalid or expired.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\n      <div className=\"bg-white p-8 rounded-lg shadow-md text-center max-w-md w-full\">\n        <h1 className={`text-2xl font-semibold mb-4 ${isSuccess ? \"text-green-600\" : isSuccess === false ? \"text-red-600\" : \"\"}`}>\n          {isLoading ? \"Verifying...\" : isSuccess === null ? \"Email Verification\" : isSuccess ? \"Success!\" : \"Verification Failed\"}\n        </h1>\n\n        <p className=\"text-gray-700 mb-4\">\n          {isLoading\n            ? \"Please wait while we verify your email...\"\n            : message || \"Enter your verification token below.\"}\n        </p>\n\n        {!isLoading && (\n          <>\n            <input\n              type=\"text\"\n              placeholder=\"Enter token\"\n              className=\"w-full px-4 py-2 border rounded-md mb-4\"\n              value={tokenInput}\n              onChange={(e) => setTokenInput(e.target.value)}\n            />\n            <button\n              onClick={handleVerify}\n              className=\"w-full px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500\"\n            >\n              Verify Email\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VerifyEmailPage;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Booking/BookingCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Booking/CreateBookingForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/ConfirmationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Filters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Hotel/HotelCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Hotel/HotelDetails.tsx","messages":[{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":1,"message":"Prefer using the primitive `number` as a type name, rather than the upper-cased `Number`.","line":19,"column":11,"nodeType":"Identifier","messageId":"bannedClassType","endLine":19,"endColumn":17,"fix":{"range":[768,774],"text":"number"}},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":136,"column":50,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":136,"endColumn":60,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[5038,5039],"text":""},"desc":"You should remove the non-null assertion."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from \"react\";\nimport { FaBookmark, FaRegBookmark } from \"react-icons/fa\"; // Import missing icons\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\nimport { HotelData } from \"../../types/Hotels\";\nimport { Review } from \"../../types/Review\";\n\ntype HotelDetailsProps = {\n  hotel: HotelData | null;\n  reviews: Review[];\n  userInfo: { [key: string]: { firstName: string; lastName: string } };\n  getPricingRange: () => string;\n  formatToAMPM: (timeString: string) => string;\n  renderStars: (rating: number) => React.ReactNode;\n  isBookmarked: boolean;\n  setIsBookmarked: (value: boolean) => void;\n  handleBookmarkToggle: () => void;\n  handleDeleteHotel: (hotelId: number) => void;\n  setIsReviewModalOpen: (open: boolean) => void;\n  userId: Number;\n};\n\nconst HotelDetails: React.FC<HotelDetailsProps> = ({\n  hotel,\n  reviews,\n  userInfo,\n  getPricingRange,\n  formatToAMPM,\n  renderStars,\n  isBookmarked,\n  handleBookmarkToggle,\n  handleDeleteHotel,\n  setIsReviewModalOpen,\n  userId,\n}) => {\n  const navigate = useNavigate();\n  const defaultImage = 'https://archive.org/download/placeholder-image/placeholder-image.jpg';\n  const userRole = sessionStorage.getItem('role');\n  const isAdmin = userRole === 'admin';\n\n  const formatPhoneNumber = (rawPhone: string) => {\n    if (!rawPhone || rawPhone.length < 5) return rawPhone;\n    const countryCode = rawPhone.slice(0, 2);\n    const localNumber = rawPhone.slice(2);\n    return `(+${countryCode}) ${localNumber}`;\n  };\n\n  const handleBookClick = () => {\n    navigate(`/create-bookings/${hotel?.id}`);\n  };\n\n  const handleUpdateHotel = () => {\n    navigate(`/create-hotel/${hotel?.id}`);\n  };\n\n  const ContactInfo = ({ hotel }: { hotel: HotelData | null }) => (\n    <div>\n      <h3 className=\"text-xl font-semibold mb-2\">Contact Info</h3>\n      <p><strong>Address:</strong> {hotel?.address || 'N/A'}</p>\n      <p><strong>Contact:</strong> {hotel?.contact ? formatPhoneNumber(hotel.contact) : 'N/A'}</p>\n    </div>\n  );\n\n  const PricingTiming = ({ hotel }: { hotel: HotelData | null }) => (\n    <div>\n      <h3 className=\"text-xl font-semibold mb-2\">Pricing & Timing</h3>\n      <p><strong>Price Range:</strong> {getPricingRange()}</p>\n      <p><strong>Check-In:</strong> {hotel?.checkIn ? formatToAMPM(hotel.checkIn) : 'N/A'}</p>\n      <p><strong>Check-Out:</strong> {hotel?.checkOut ? formatToAMPM(hotel.checkOut) : 'N/A'}</p>\n    </div>\n  );\n\n  const Reviews = ({ reviews, userInfo }: { reviews: Review[], userInfo: { [key: string]: { firstName: string; lastName: string } } }) => (\n    <div>\n      <h3 className=\"text-xl font-semibold mb-2\">Reviews</h3>\n      <div\n        className=\"space-y-4 max-h-96 overflow-y-auto pr-2\"\n        style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\n      >\n        {reviews.length === 0 ? (\n          <p>No reviews available for this hotel.</p>\n        ) : (\n          reviews.map((review, index) => (\n            <div key={index} className=\"bg-gray-100 p-4 rounded shadow\">\n              <p className=\"font-semibold\">\n                {userInfo[review.userId]?.firstName} {userInfo[review.userId]?.lastName}\n              </p>\n              <p className=\"flex\">{renderStars(review.rating)}</p>\n              <p className=\"text-gray-800\">{review.comment}</p>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n  \n  return (\n    <div className=\"max-w-7xl mx-auto p-8 space-y-8\">\n      {/* Hotel Image */}\n      <img\n        src={hotel?.image ? `data:image/jpeg;base64,${hotel.image}` : defaultImage}\n        alt={hotel?.name}\n        className=\"w-full h-96 object-cover rounded-2xl shadow-xl transition-transform transform hover:scale-105 mb-8\"\n      />\n  \n      {/* Hotel Name and Action Buttons */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-4xl font-semibold text-gray-800\">{hotel?.name}</h1>\n        <div className=\"flex items-center space-x-4\">\n          {/* Bookmark Button */}\n          <button\n            onClick={handleBookmarkToggle}\n            className=\"text-gray-700 hover:text-blue-500 transition-all transform hover:scale-110 text-2xl\"\n          >\n            {isBookmarked ? <FaBookmark /> : <FaRegBookmark />}\n          </button>\n  \n          {/* Book Button (only for non-admins) */}\n          {userId && (\n            <button\n              onClick={handleBookClick}\n              className=\"bg-blue-600 text-white text-sm px-4 py-2 rounded-full shadow-md hover:bg-blue-700 transition-all transform hover:scale-105\"            >\n              Book Now\n            </button>\n          )}\n  \n          {/* Admin Action Buttons */}\n          {isAdmin && (\n            <>\n              <button\n                onClick={handleUpdateHotel}\n                className=\"bg-blue-600 text-white text-sm px-4 py-2 rounded-full shadow-md hover:bg-blue-700 transition-all transform hover:scale-105\"\n              >\n                Update Hotel\n              </button>\n              <button\n                onClick={() => handleDeleteHotel(hotel?.id!)}\n                className=\"bg-red-600 text-white text-sm px-4 py-2 rounded-full shadow-md hover:bg-red-700 transition-all transform hover:scale-105\"\n              >\n                Delete Hotel\n              </button>\n            </>\n          )}\n        </div>\n      </div>\n  \n      {/* Hotel Description */}\n      <p className=\"text-gray-800 text-lg mb-6\">{hotel?.description}</p>\n  \n      {/* Pricing and Contact Info */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <ContactInfo hotel={hotel} />\n        <PricingTiming hotel={hotel} />\n      </div>\n  \n      {/* Reviews Section */}\n      {userId !== 0 && (\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800\">Reviews</h2>\n          <button\n            onClick={() => setIsReviewModalOpen(true)}\n            className=\"bg-green-600 text-white px-6 py-3 rounded-full shadow-md hover:bg-green-700 transition-all transform hover:scale-105\"\n          >\n            Write a Review\n          </button>\n        </div>\n      )}\n  \n      {/* Reviews List */}\n      <Reviews reviews={reviews} userInfo={userInfo} />\n    </div>\n  );\n  \n};\n\nexport default HotelDetails;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Hotel/HotelForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[367,370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[367,370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1672,1675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1672,1675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":60,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport { OPEN_CAGE_API_KEY } from '../../constants/constants';\nimport { RoomRequestDTO } from '../../types/Room';\n\ninterface HotelFormProps {\n  onSave: (formData: FormData) => Promise<void>;\n  hotelId?: number;\n  hotelData?: any;\n}\n\nconst HotelForm: React.FC<HotelFormProps> = ({ onSave, hotelId, hotelData }) => {\n  const [name, setName] = useState<string>('');\n  const [address, setAddress] = useState<string>('');\n  const [latitude, setLatitude] = useState<number>(0);\n  const [longitude, setLongitude] = useState<number>(0);\n  const [image, setImage] = useState<File | null>(null);\n  const [rooms, setRooms] = useState<RoomRequestDTO[]>([]);\n  const [imagePreview, setImagePreview] = useState<string>('');\n  const [check_in, setCheckIn] = useState<string>('');\n  const [check_out, setCheckOut] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [contact, setContact] = useState<string>('');\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n\n\n  const fetchCoordinates = async (address: string) => {\n    const encodedAddress = encodeURIComponent(address);\n    const geocodeUrl = `https://api.opencagedata.com/geocode/v1/json?q=${encodedAddress}&key=${OPEN_CAGE_API_KEY}`;\n  \n    try {\n      const response = await fetch(geocodeUrl);\n      const data = await response.json();\n  \n      if (data.status.code === 200 && data.results.length > 0) {\n        // You can tune these criteria based on your requirement\n        const validResult = data.results.find((result: any) => {\n          const components = result.components;\n          return (\n            components.road &&\n            components.city &&\n            components.country &&\n            result.components.country_code === 'sg' &&\n            result.confidence >= 8\n          );\n        });\n  \n        if (validResult) {\n          const { lat, lng } = validResult.geometry;\n          setLatitude(lat);\n          setLongitude(lng);\n        } else {\n          setLatitude(0);\n          setLongitude(0);\n        }\n      } else {\n        setErrors((prev) => ({ ...prev, coordinates: 'Unable to fetch coordinates for the given address' }));\n      }\n    } catch (error) {\n      setErrors((prev) => ({ ...prev, coordinates: 'Error fetching coordinates' }));\n    }\n  };  \n\n  useEffect(() => {\n    if (address) {\n      fetchCoordinates(address);\n    } else {\n      setLatitude(0);\n      setLongitude(0);\n    }\n  }, [address]);\n\n  useEffect(() => {\n    if (hotelId && hotelData) {\n      setName(hotelData.name);\n      setAddress(hotelData.address);\n      setLatitude(hotelData.latitude);\n      setLongitude(hotelData.longitude);\n      setImagePreview(hotelData.image);\n      setDescription(hotelData.description);\n      setContact(hotelData.contact);\n      setCheckIn(hotelData.checkIn);\n      setCheckOut(hotelData.checkOut);\n      setRooms(hotelData.rooms || []);\n    } else if (!hotelId) {\n      setRooms([{ roomType: '', pricePerNight: 0, maxOccupancy: 1, quantity: 0 }]);\n    }\n  }, [hotelId, hotelData]);\n\n  const handleNameInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const regex = /^[a-zA-Z ]*$/;\n    if (value === '' || regex.test(value)) {\n      setName(value);\n    }\n  };\n\n  const roomTypes = ['SINGLE', 'DOUBLE', 'SUITE', 'DELUXE'];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const newErrors: { [key: string]: string } = {};\n\n    if (!name.trim()) {\n      newErrors.name = 'Hotel name is required.';\n    } else if (/^\\d+$/.test(name.trim())) {\n      newErrors.name = 'Hotel name cannot be only numbers.';\n    }\n\n    if (!address.trim()) {\n      newErrors.address = 'Hotel address is required.';\n    }\n\n    if (!check_in) {\n      newErrors.check_in = 'Check-in time is required.';\n    }\n\n    if (!check_out) {\n      newErrors.check_out = 'Check-out time is required.';\n    }\n\n    const validRooms = rooms.filter((room) => typeof room.roomType === 'string' && room.roomType.trim() !== '');\n    const roomTypeSet = new Set<string>();\n\n    validRooms.forEach((room, index) => {\n      const key = `room_${index}`;\n\n      if (!room.roomType.trim()) {\n        newErrors[`${key}_roomType`] = 'Room type is required.';\n      }\n\n      const normalized = room.roomType.trim().toUpperCase();\n      if (roomTypeSet.has(normalized)) {\n        newErrors[`${key}_duplicate`] = `Duplicate room type: ${room.roomType}`;\n      } else {\n        roomTypeSet.add(normalized);\n      }\n\n      if (room.pricePerNight < 0) {\n        newErrors[`${key}_price`] = 'Price per night must be at least 0.';\n      }\n\n      if (room.maxOccupancy < 1) {\n        newErrors[`${key}_occupancy`] = 'Occupancy must be at least 1.';\n      }\n\n      if (room.quantity < 0) {\n        newErrors[`${key}_quantity`] = 'Quantity cannot be negative.';\n      }\n    });\n\n    if (!hotelId && validRooms.every((room) => room.quantity === 0)) {\n      newErrors.rooms = 'At least one room must have quantity greater than 0.';\n    }\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n\n    setErrors({});\n\n    const convertTime = (time: string) => {\n      const [hour, minute] = time.split(':').map(Number);\n      return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`;\n    };\n\n    const filteredRooms = validRooms.filter((room) => room.quantity > 0);\n\n    const formData = new FormData();\n    formData.append('hotelDetails', JSON.stringify({\n      name,\n      address,\n      latitude,\n      longitude,\n      rooms: filteredRooms,\n      description,\n      contact,\n      checkIn: convertTime(check_in),\n      checkOut: convertTime(check_out),\n    }));\n\n    if (image) {\n      formData.append('image', image);\n    } else if (imagePreview) {\n      formData.append('image', imagePreview);\n    }\n\n    await onSave(formData);\n  };\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files ? e.target.files[0] : null;\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string);\n        setImage(file);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <div className=\"bg-white shadow-2xl rounded-3xl p-10 max-w-5xl mx-auto space-y-10\">\n      <h2 className=\"text-4xl font-bold text-gray-800 text-center\">\n        {hotelId ? 'Update Hotel Details' : 'Add New Hotel'}\n      </h2>\n  \n      {Object.keys(errors).length > 0 && (\n        <div className=\"p-4 bg-red-50 border border-red-400 text-red-700 rounded-xl shadow-sm\">\n          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n            {Object.values(errors).map((msg, idx) => (\n              <li key={idx}>{msg}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n  \n      <form onSubmit={handleSubmit} className=\"space-y-8\">\n        {/* Hotel Name */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hotel Name</label>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={handleNameInput}\n            className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 ${errors.name ? 'border-red-500 ring-red-300' : 'focus:ring-blue-500'}`}\n          />\n          {errors.name && <p className=\"text-red-600 text-sm mt-1\">{errors.name}</p>}\n        </div>\n  \n        {/* Address */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Address</label>\n          <input\n            type=\"text\"\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 ${errors.address ? 'border-red-500 ring-red-300' : 'focus:ring-blue-500'}`}\n          />\n          {errors.address && <p className=\"text-red-600 text-sm mt-1\">{errors.address}</p>}\n        </div>\n  \n        {/* Coordinates */}\n        <div className=\"grid grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Latitude</label>\n            <input type=\"text\" value={latitude} disabled className=\"w-full px-4 py-3 border rounded-xl bg-gray-100 text-gray-500\" />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Longitude</label>\n            <input type=\"text\" value={longitude} disabled className=\"w-full px-4 py-3 border rounded-xl bg-gray-100 text-gray-500\" />\n          </div>\n        </div>\n  \n        {/* Image Upload */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hotel Image</label>\n          <input type=\"file\" onChange={handleImageChange} className=\"w-full px-4 py-3 border rounded-xl\" />\n          {imagePreview && (\n            <div className=\"mt-4\">\n              <img\n                src={imagePreview.startsWith('data:') ? imagePreview : `data:image/jpeg;base64,${imagePreview}`}\n                alt=\"Preview\"\n                className=\"w-32 h-32 object-cover rounded-lg border shadow-sm\"\n              />\n            </div>\n          )}\n        </div>\n  \n        {/* Check-In / Check-Out Times */}\n        <div className=\"grid grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Check-In Time</label>\n            <input\n              type=\"time\"\n              value={check_in}\n              onChange={(e) => setCheckIn(e.target.value)}\n              className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 ${errors.check_in ? 'border-red-500 ring-red-300' : 'focus:ring-blue-500'}`}\n            />\n            {errors.check_in && <p className=\"text-red-600 text-sm mt-1\">{errors.check_in}</p>}\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Check-Out Time</label>\n            <input\n              type=\"time\"\n              value={check_out}\n              onChange={(e) => setCheckOut(e.target.value)}\n              className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 ${errors.check_out ? 'border-red-500 ring-red-300' : 'focus:ring-blue-500'}`}\n            />\n            {errors.check_out && <p className=\"text-red-600 text-sm mt-1\">{errors.check_out}</p>}\n          </div>\n        </div>\n  \n        {/* Description */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hotel Description</label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            rows={4}\n            className=\"w-full px-4 py-3 border rounded-xl resize-none focus:ring-2 focus:ring-blue-500 focus:outline-none\"\n          />\n        </div>\n  \n        {/* Contact */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Contact Info</label>\n          <PhoneInput\n            country={'sg'}\n            inputClass=\"!w-full p-2 border rounded-xl bg-gray-50\"\n            containerClass=\"relative flex justify-end\"\n            value={contact}\n            onChange={(value: string) => setContact(value)}\n          />\n        </div>\n  \n        {/* Room Fields */}\n        {!hotelId && (\n          <div className=\"space-y-7\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Room Types</h3>\n            {rooms.map((room, index) => {\n              const key = `room_${index}`;\n              return (\n                <div key={index} className=\"grid grid-cols-6 gap-4 items-end\">\n                  \n                  {/* Room Type */}\n                  <div className=\"col-span-2\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Room Type</label>\n                    <select\n                      value={room.roomType}\n                      onChange={(e) => {\n                        const updatedRooms = [...rooms];\n                        updatedRooms[index].roomType = e.target.value;\n                        setRooms(updatedRooms);\n                      }}\n                      className={`w-full px-4 py-3 border rounded-xl focus:outline-none ${errors[`${key}_roomType`] || errors[`${key}_duplicate`] ? 'border-red-500' : 'focus:ring-2 focus:ring-blue-500'}`}\n                    >\n                      <option value=\"\">Select Room Type</option>\n                      {roomTypes.map((type) => (\n                        <option key={type} value={type}>\n                          {type}\n                        </option>\n                      ))}\n                    </select>\n                    {(errors[`${key}_roomType`] || errors[`${key}_duplicate`]) && (\n                      <p className=\"text-red-600 text-sm mt-1\">\n                        {errors[`${key}_roomType`] || errors[`${key}_duplicate`]}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Price Per Night */}\n                  <div className=\"col-span-1\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Price/Night</label>\n                    <input\n                      type=\"text\"\n                      value={room.pricePerNight || ''}\n                      onChange={(e) => {\n                        const updatedRooms = [...rooms];\n                        updatedRooms[index].pricePerNight = Number(e.target.value);\n                        setRooms(updatedRooms);\n                      }}\n                      className={`w-full px-4 py-3 border rounded-xl focus:outline-none ${errors[`${key}_price`] ? 'border-red-500' : 'focus:ring-2 focus:ring-blue-500'}`}\n                    />\n                    {errors[`${key}_price`] && <p className=\"text-red-600 text-sm mt-1\">{errors[`${key}_price`]}</p>}\n                  </div>\n\n                  {/* Max Occupancy */}\n                  <div className=\"col-span-1\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Max Occupancy</label>\n                    <input\n                      type=\"text\"\n                      value={room.maxOccupancy || ''}\n                      onChange={(e) => {\n                        const updatedRooms = [...rooms];\n                        updatedRooms[index].maxOccupancy = Number(e.target.value);\n                        setRooms(updatedRooms);\n                      }}\n                      className={`w-full px-4 py-3 border rounded-xl focus:outline-none ${errors[`${key}_occupancy`] ? 'border-red-500' : 'focus:ring-2 focus:ring-blue-500'}`}\n                    />\n                    {errors[`${key}_occupancy`] && <p className=\"text-red-600 text-sm mt-1\">{errors[`${key}_occupancy`]}</p>}\n                  </div>\n\n                  {/* Quantity */}\n                  <div className=\"col-span-1\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Quantity</label>\n                    <input\n                      type=\"text\"\n                      value={room.quantity || ''}\n                      onChange={(e) => {\n                        const updatedRooms = [...rooms];\n                        updatedRooms[index].quantity = Number(e.target.value);\n                        setRooms(updatedRooms);\n                      }}\n                      className={`w-full px-4 py-3 border rounded-xl focus:outline-none ${errors[`${key}_quantity`] ? 'border-red-500' : 'focus:ring-2 focus:ring-blue-500'}`}\n                    />\n                    {errors[`${key}_quantity`] && <p className=\"text-red-600 text-sm mt-1\">{errors[`${key}_quantity`]}</p>}\n                  </div>\n\n                  {/* Remove Button */}\n                  <div className=\"flex col-span-1 justify-center items-end\">\n                    <button\n                      type=\"button\"\n                      disabled={rooms.length === 1}\n                      onClick={() => {\n                        if (rooms.length > 1) {\n                          const updated = rooms.filter((_, i) => i !== index);\n                          setRooms(updated);\n                        }\n                      }}\n                      className=\"mt-auto bg-red-500 text-white px-3 py-2 rounded hover:bg-red-600 disabled:opacity-50 text-sm hover:scale-105 transition-all\"\n                      >\n                      Remove\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n\n            {errors.rooms && <p className=\"text-red-600 text-sm\">{errors.rooms}</p>}\n\n            <button\n              type=\"button\"\n              onClick={() => setRooms([...rooms, { roomType: '', pricePerNight: 0, maxOccupancy: 1, quantity: 0 }])}\n              className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 hover:scale-105 transition-all\"\n              >\n              Add Room Type\n            </button>\n          </div>\n        )}\n  \n        {/* Submit */}\n        <div className=\"flex justify-end\">\n          <button\n            type=\"submit\"\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-xl transition-all shadow-md hover:scale-105\"\n            >\n            {hotelId ? 'Update Hotel' : 'Save Hotel'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n  \n  \n};\n\nexport default HotelForm;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/MessageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/ReviewModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/User/AccountSettingsForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":71,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport MessageModal from \"../MessageModal\"; // import the MessageModal component\n\ntype AccountSettingsFormProps = {\n  userInfo: { name: string; email: string; phoneNumber: string; role: string };\n  newEmail: string;\n  setNewEmail: React.Dispatch<React.SetStateAction<string>>;\n  passwords: { currentPassword: string; newPassword: string };\n  setPasswords: React.Dispatch<React.SetStateAction<{ currentPassword: string; newPassword: string }>>;\n  handleEmailChange: () => void;\n  handlePasswordChange: () => void;\n  handleDeleteAccount: () => void;\n};\n\nconst AccountSettingsForm: React.FC<AccountSettingsFormProps> = ({\n  userInfo,\n  newEmail,\n  setNewEmail,\n  passwords,\n  setPasswords,\n  handleEmailChange,\n  handlePasswordChange,\n  handleDeleteAccount,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);  // single error message\n  const [isModalOpen, setIsModalOpen] = useState(false); // control modal visibility\n\n  const isValidEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const isValidPassword = (password: string) => {\n    return password.length >= 8;\n  };\n\n  const handleEmailSubmit = async () => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    if (!isValidEmail(newEmail)) {\n      setErrorMessage(\"Please enter a valid email address.\");\n      setIsModalOpen(true); // Show the modal for email error\n      setLoading(false);\n      return;\n    }\n\n    try {\n      await handleEmailChange();\n    } catch (err) {\n      setErrorMessage(\"Failed to update email. Please try again.\");\n      setIsModalOpen(true); // Show the modal for error\n    }\n    setLoading(false);\n  };\n\n  const handlePasswordSubmit = async () => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    if (!isValidPassword(passwords.newPassword)) {\n      setErrorMessage(\"Password must be at least 8 characters long.\");\n      setIsModalOpen(true); // Show the modal for password error\n      setLoading(false);\n      return;\n    }\n\n    try {\n      await handlePasswordChange();\n    } catch (err) {\n      setErrorMessage(\"Failed to change password. Please try again.\");\n      setIsModalOpen(true); // Show the modal for error\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"max-w-lg mx-auto bg-white shadow-md rounded-lg p-6\">\n      <h2 className=\"text-2xl font-semibold mb-4\">Account Settings</h2>\n\n      {/* Personal Info */}\n      <div className=\"mb-4\">\n        <label className=\"block text-gray-700 text-sm\">Name</label>\n        <p className=\"border px-2 py-1 rounded bg-gray-100 text-sm\">{userInfo.name}</p>\n      </div>\n\n      <div className=\"mb-4\">\n        <label className=\"block text-gray-700 text-sm\">Registered Email</label>\n        <p className=\"border px-2 py-1 rounded bg-gray-100 text-sm\">{userInfo.email}</p>\n      </div>\n\n      {/* Change Email */}\n      <div className=\"mb-4\">\n        <label className=\"block text-gray-700 text-sm\">Change Email</label>\n        <div className=\"flex items-center space-x-2\">\n          <input\n            type=\"email\"\n            className=\"w-full border px-2 py-1 text-sm rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"Enter new email\"\n            value={newEmail}\n            onChange={(e) => setNewEmail(e.target.value)}\n          />\n          <button\n            onClick={handleEmailSubmit}\n            disabled={loading}\n            className={`bg-blue-600 text-white text-sm px-4 py-2 rounded hover:bg-blue-700 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}\n          >\n            {loading ? 'Updating...' : 'Update'}\n          </button>\n        </div>\n      </div>\n\n      {/* Change Password */}\n      <div className=\"mb-4\">\n        <label className=\"block text-gray-700 text-sm\">Change Password</label>\n        <input\n          type=\"password\"\n          className=\"w-full border px-2 py-1 text-sm rounded mb-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"Current password\"\n          value={passwords.currentPassword}\n          onChange={(e) => setPasswords((prev) => ({ ...prev, currentPassword: e.target.value }))}\n        />\n        <input\n          type=\"password\"\n          className=\"w-full border px-2 py-1 text-sm rounded mb-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"New password\"\n          value={passwords.newPassword}\n          onChange={(e) => setPasswords((prev) => ({ ...prev, newPassword: e.target.value }))}\n        />\n        <button\n          onClick={handlePasswordSubmit}\n          disabled={loading}\n          className={`bg-green-600 text-white text-sm px-4 py-2 rounded hover:bg-green-700 ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}\n        >\n          {loading ? 'Changing...' : 'Change Password'}\n        </button>\n      </div>\n\n      {/* Delete Account */}\n      <div className=\"mt-4 text-center\">\n        <button\n          onClick={handleDeleteAccount}\n          className=\"bg-red-600 text-white text-sm px-4 py-2 rounded hover:bg-red-700\"\n        >\n          Delete Account\n        </button>\n      </div>\n\n      {/* Message Modal for Errors */}\n      <MessageModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        message={errorMessage || \"\"}\n        type=\"error\"\n      />\n    </div>\n  );\n};\n\nexport default AccountSettingsForm;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/User/LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/User/RegisterForm.tsx","messages":[{"ruleId":"prefer-const","severity":1,"message":"'errors' is never reassigned. Use 'const' instead.","line":24,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":24,"endColumn":25,"fix":{"range":[1060,1086],"text":"const errors: string[] = [];"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect, useState } from \"react\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport { RegisterData } from \"../../types/User\";\nimport MessageModal from \"../MessageModal\";\n\nconst RegisterForm: React.FC<{\n  onRegister: (registerData: RegisterData) => void;\n  error: string | null;\n  registerData: RegisterData;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  confirmPassword: string;\n  setConfirmPassword: React.Dispatch<React.SetStateAction<string>>;\n}> = ({ onRegister, error, registerData, handleChange, confirmPassword, setConfirmPassword }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const [modalMessage, setModalMessage] = useState<string>(\"\");\n\n  const handleModal = (open: boolean) => setIsModalOpen(open);\n\n  const validateForm = () => {\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n    const passwordMinLength = 8;\n    let errors: string[] = [];\n\n    // Validate email\n    if (!emailRegex.test(registerData.email)) {\n      errors.push(\"Please enter a valid email address.\");\n    }\n\n    // Validate password length\n    if (registerData.password.length < passwordMinLength) {\n      errors.push(`Password must be at least ${passwordMinLength} characters long.`);\n    }\n\n    // Validate passwords match\n    if (registerData.password !== confirmPassword) {\n      errors.push(\"Passwords do not match.\");\n    }\n\n    if (errors.length > 0) {\n      // Create a bullet point list of errors\n      setValidationError(\n        `<ul>${errors.map(error => `<li>${error}</li>`).join('')}</ul>`\n      );\n      return false;\n    }\n\n    setValidationError(null);\n    return true;\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      // Assuming onRegister is the function that will create the user account\n      onRegister(registerData);\n      setModalMessage(\"Verification email has been sent.\\nYour account has been created successfully!\"); // Both messages\n      handleModal(true); // Open modal on success\n    } else {\n      setModalMessage(validationError || \"There was an error with your registration.\");\n      handleModal(true); // Open modal if validation fails\n    }\n  };\n\n  // Ensure modal message is updated based on error or validation error change\n  useEffect(() => {\n    if (validationError) {\n      setModalMessage(validationError);\n      handleModal(true); // Open modal when validation error is set\n    } else if (error) {\n      setModalMessage(error);\n      handleModal(true); // Open modal when there's an error\n    }\n  }, [validationError, error]); // Dependency array ensures update when validationError or error change\n  \n  return (\n    <div className=\"bg-white border border-gray-100 shadow-xl rounded-2xl p-8 w-full max-w-2xl mx-auto mt-12\">\n      <h2 className=\"text-4xl font-bold mb-8 text-center text-gray-800\">Sign Up</h2>\n  \n      {/* Success or Error Modal */}\n      <MessageModal\n        isOpen={isModalOpen}\n        onClose={() => handleModal(false)}\n        message={modalMessage}\n        type={validationError || error ? \"error\" : \"success\"}\n      />\n  \n      <div className=\"space-y-6 text-sm\">\n        {/* First and Last Name */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-gray-600 font-medium mb-1\">First Name</label>\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              value={registerData.firstName}\n              onChange={handleChange}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm transition duration-200\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-gray-600 font-medium mb-1\">Last Name</label>\n            <input\n              type=\"text\"\n              name=\"lastName\"\n              value={registerData.lastName}\n              onChange={handleChange}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm transition duration-200\"\n            />\n          </div>\n        </div>\n  \n        {/* Email and Phone */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-gray-600 font-medium mb-1\">Email</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={registerData.email}\n              onChange={handleChange}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm transition duration-200\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-gray-600 font-medium mb-1\">Phone Number</label>\n            <PhoneInput\n              country={'sg'}\n              inputProps={{\n                required: true,\n                className: \"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm transition duration-200\",\n              }}\n              buttonClass=\"text-sm\"\n              containerClass=\"relative flex justify-end\"\n              value={registerData.phoneNumber}\n              onChange={(value: string) =>\n                handleChange({\n                  target: { name: 'phoneNumber', value },\n                } as React.ChangeEvent<HTMLInputElement>)\n              }\n            />\n          </div>\n        </div>\n  \n        {/* Password and Confirm Password */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-gray-600 font-medium mb-1\">Password</label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={registerData.password}\n              onChange={handleChange}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm transition duration-200\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-gray-600 font-medium mb-1\">Confirm Password</label>\n            <input\n              type=\"password\"\n              name=\"confirmPassword\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm transition duration-200\"\n            />\n          </div>\n        </div>\n  \n        {/* Register Button */}\n        <button\n          onClick={handleSubmit}\n          className=\"w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 rounded-full font-semibold shadow-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 ease-in-out transform hover:scale-[1.02]\"\n        >\n          Register\n        </button>\n      </div>\n    </div>\n  );  \n};\n\nexport default RegisterForm;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/components/UserModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":58,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":58,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport PhoneInput from 'react-phone-input-2';\nimport 'react-phone-input-2/lib/style.css';\nimport { User } from \"../types/User\";\n\ntype UserModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (user: User) => void;\n  currentUser: User | null;\n};\n\nconst UserModal: React.FC<UserModalProps> = ({ isOpen, onClose, onSubmit, currentUser }) => {\n  const [user, setUser] = useState<User>({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    role: \"USER\",\n    phoneNumber: \"\",\n    id: 0,\n  });\n  const [password, setPassword] = useState<string>(\"\");\n  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\n  const [passwordError, setPasswordError] = useState<string>(\"\");\n  const [nameError, setNameError] = useState<string>(\"\");\n\n  // Reset form when the modal is closed or when `currentUser` changes\n  useEffect(() => {\n    if (isOpen) {\n      if (currentUser) {\n        setUser({\n          ...currentUser,\n          role: currentUser.role === \"CUSTOMER\" ? \"USER\" : currentUser.role,\n        });\n      } else {\n        setUser({\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n          role: \"USER\",\n          phoneNumber: \"\",\n          id: 0,\n        });\n        setPassword(\"\");\n        setConfirmPassword(\"\");\n        setPasswordError(\"\");\n        setNameError(\"\");\n      }\n    }\n  }, [isOpen, currentUser]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setUser({ ...user, [e.target.name]: e.target.value });\n  };\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    name === \"password\" ? setPassword(value) : setConfirmPassword(value);\n  };\n\n  // Prevent non-letter characters for first and last name and set error message\n  const handleNameInput = (e: React.FormEvent<HTMLInputElement>, name: 'firstName' | 'lastName') => {\n    const value = e.currentTarget.value;\n    const regex = /^[a-zA-Z ]*$/; // Allow letters and spaces only\n    if (regex.test(value)) {\n      setUser({ ...user, [name]: value });\n      setNameError(\"\"); // Clear error if valid input\n    } else {\n      setNameError(\"Names can only contain letters and spaces.\");\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!currentUser) {\n      if (password !== confirmPassword) {\n        setPasswordError(\"Passwords do not match!\");\n        return;\n      }\n\n      if (password.length < 6) {\n        setPasswordError(\"Password must be at least 6 characters.\");\n        return;\n      }\n    }\n\n    if (nameError) {\n      return; // Prevent submission if there's a name error\n    }\n\n    setPasswordError(\"\");\n\n    const updatedUser = {\n      ...user,\n      role: user.role === \"USER\" ? \"CUSTOMER\" : user.role,\n      ...(currentUser ? {} : { password, confirmPassword }),\n    };\n\n    onSubmit(updatedUser);\n  };\n\n  if (!isOpen) return null;\n\n  const inputClass =\n    \"w-full px-3 py-2 bg-gray-700 border border-gray-600 text-white placeholder-gray-400 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none transition\";\n\n  return (\n    <>\n      <div className=\"fixed inset-0 bg-black bg-opacity-40 z-40\" onClick={onClose} />\n      <div className=\"fixed inset-0 flex justify-center items-center z-50 px-4\">\n        <div className=\"bg-gray-800 text-white rounded-2xl shadow-2xl w-full max-w-lg p-6 relative\">\n          <button\n            className=\"absolute top-3 right-3 text-gray-400 hover:text-white text-2xl\"\n            onClick={onClose}\n            aria-label=\"Close Modal\"\n          >\n            &times;\n          </button>\n\n          <h2 className=\"text-2xl font-bold text-center mb-6\">\n            {currentUser ? \"Edit User\" : \"Create User\"}\n          </h2>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">First Name</label>\n                <input\n                  type=\"text\"\n                  name=\"firstName\"\n                  value={user.firstName}\n                  onInput={(e) => handleNameInput(e, 'firstName')}\n                  className={inputClass}\n                  required\n                />\n                {nameError && <div className=\"text-red-400 text-sm\">{nameError}</div>}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Last Name</label>\n                <input\n                  type=\"text\"\n                  name=\"lastName\"\n                  value={user.lastName}\n                  onInput={(e) => handleNameInput(e, 'lastName')}\n                  className={inputClass}\n                  required\n                />\n                {nameError && <div className=\"text-red-400 text-sm\">{nameError}</div>}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={user.email}\n                onChange={handleChange}\n                className={inputClass}\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Phone Number</label>\n              <PhoneInput\n                country={'sg'}\n                inputClass=\"!w-full !bg-gray-700 !text-white !border-gray-600 !rounded-md !px-3 !py-2 !placeholder-transparent\"\n                buttonClass=\"!bg-gray-700 !border-gray-600\"\n                containerClass=\"w-full relative flex justify-end\"\n                value={user.phoneNumber}\n                onChange={(value: string) =>\n                  handleChange({ target: { name: 'phoneNumber', value } } as React.ChangeEvent<HTMLInputElement>)\n                }\n              />\n            </div>\n\n            {!currentUser && (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Account Type</label>\n                <select\n                  name=\"role\"\n                  value={user.role}\n                  onChange={handleChange}\n                  className={inputClass}\n                >\n                  <option value=\"USER\">User</option>\n                  <option value=\"ADMIN\">Admin</option>\n                </select>\n              </div>\n            )}\n\n            {!currentUser && (\n              <>\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Password</label>\n                  <input\n                    type=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handlePasswordChange}\n                    className={inputClass}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Confirm Password</label>\n                  <input\n                    type=\"password\"\n                    name=\"confirmPassword\"\n                    value={confirmPassword}\n                    onChange={handlePasswordChange}\n                    className={inputClass}\n                    required\n                  />\n                </div>\n              </>\n            )}\n\n            {passwordError && (\n              <div className=\"text-red-400 text-sm\">{passwordError}</div>\n            )}\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-4 py-2 rounded-md border border-gray-600 text-white hover:bg-gray-700 transition-transform transform hover:scale-105\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-transform transform hover:scale-105\"\n              >\n                {currentUser ? \"Update\" : \"Create\"}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UserModal;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/constants/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/contexts/AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":11,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":11,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, ReactNode } from \"react\";\n\ninterface AuthContextType {\n  isLoggedIn: boolean;\n  role: string | null;\n  userId: string | null;\n  login: (token: string, role: string, userId: string) => void;\n  logout: () => void;\n}\n\nexport const AuthContext = createContext<AuthContextType>({\n  isLoggedIn: false,\n  role: null,\n  userId: null,\n  login: () => {},\n  logout: () => {},\n});\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [role, setRole] = useState<string | null>(null);\n  const [userId, setUserId] = useState<string | null>(null);\n\n  useEffect(() => {\n    const token = sessionStorage.getItem(\"token\");\n    const savedRole = sessionStorage.getItem(\"role\");\n    const savedUserId = sessionStorage.getItem(\"userId\");\n\n    setIsLoggedIn(!!token); // Check if token exists\n    setRole(savedRole ? savedRole.toLowerCase() : null); // Set role from sessionStorage if available\n    setUserId(savedUserId); // Set userId from sessionStorage if available\n  }, []);\n\n  const login = (token: string, role: string, userId: string) => {\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"role\", role.toLowerCase());\n    sessionStorage.setItem(\"userId\", userId);\n\n    setIsLoggedIn(true);\n    setRole(role.toLowerCase());\n    setUserId(userId);\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"role\");\n    sessionStorage.removeItem(\"userId\");\n    \n    setIsLoggedIn(false);\n    setRole(null);\n    setUserId(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, role, userId, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/contexts/NotificationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":12,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":12,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useState, useEffect, useContext } from \"react\";\nimport NotificationApi from \"../services/notificationApi\";\nimport { Notification } from \"../types/Notification\";\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  refreshNotifications: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | null>(null);\n\nexport const useNotificationContext = () => {\n  const ctx = useContext(NotificationContext);\n  if (!ctx) throw new Error(\"NotificationContext not available\");\n  return ctx;\n};\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  const refreshNotifications = async () => {\n    const userId = Number(sessionStorage.getItem(\"userId\"));\n    if (!userId) return;\n    const data = await NotificationApi.getNotificationsByUserId(userId);\n    setNotifications(data);\n  };\n\n  useEffect(() => {\n    refreshNotifications();\n  }, []);\n\n  return (\n    <NotificationContext.Provider value={{ notifications, refreshNotifications }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/bookingApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1915,1918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1915,1918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":66,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { BASE_URL } from '../constants/constants';\nimport { Booking, DetailedBooking } from '../types/Booking'; // Assuming you have a Booking type defined elsewhere\n\n// Base URL for the API\nconst API_BASE_URL = `${BASE_URL}/bookings`;\n\n// Function to create a booking\nexport const createBooking = async (bookingData: Booking) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}`, bookingData);\n    return response.data.data; // Accessing response data as data.data\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      // Handle specific axios error (e.g., network, timeout, etc.)\n      return { error: error.response?.data || 'Something went wrong' };\n    }\n    return { error: 'Unexpected error occurred' };\n  }\n};\n\n// Function to get booking by ID\nexport const getBookingById = async (bookingId: number) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/${bookingId}`);\n    return response.data.data; // Accessing response data as data.data\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      return { error: error.response?.data || 'Something went wrong' };\n    }\n    return { error: 'Unexpected error occurred' };\n  }\n};\n\n// Function to cancel a booking\nexport const cancelBooking = async (bookingId: number) => {\n  try {\n    const response = await axios.delete(`${API_BASE_URL}/${bookingId}`);\n    return response.data.data; // Accessing response data as data.data\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      return { error: error.response?.data || 'Something went wrong' };\n    }\n    return { error: 'Unexpected error occurred' };\n  }\n};\n\nexport const getAllBookings = async (): Promise<{ bookings: DetailedBooking[] }> => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}`);\n    \n    // Map the response data to the DetailedBooking format\n    const bookings = response.data.data.map((booking: any) => ({\n      id: booking.id, // booking ID\n      bookingDate: booking.bookingDate, // booking date\n      checkInDate: booking.checkInDate, // check-in date\n      checkOutDate: booking.checkOutDate, // check-out date\n      status: booking.status, // status\n      totalAmount: booking.totalAmount, // total amount\n      hotelId: booking.room.hotelId, // hotel ID\n      roomId: booking.room.roomId, // room ID\n      userId: booking.user.id, // user ID\n    }));\n\n    return { bookings }; // Return the formatted bookings\n  } catch (error) {\n    throw new Error('Error fetching bookings');\n  }\n};\n\n// Function to get all bookings for a hotel\nexport const getBookingsForHotel = async (hotelId: number) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/hotel/${hotelId}`);\n    return response.data.data; // Accessing response data as data.data\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      return { error: error.response?.data || 'Something went wrong' };\n    }\n    return { error: 'Unexpected error occurred' };\n  }\n};\n\n// Function to get all bookings for a user\nexport const getBookingsForUser = async (userId: number) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/user/${userId}`);\n    return response.data.data; // Accessing response data as data.data\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      return { error: error.response?.data || 'Something went wrong' };\n    }\n    return { error: 'Unexpected error occurred' };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/bookmarkApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/hotelApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/notificationApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[695,698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[695,698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1137,1140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1137,1140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1595,1598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1595,1598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2068,2071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2068,2071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3056,3059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3056,3059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { BASE_URL } from '../constants/constants';\nimport { Notification } from '../types/Notification';\n\n// Define the response structure that contains a `data` field\ninterface NotificationResponse {\n  data: Notification[]; // This is where your actual notifications are stored\n}\n\nconst API_BASE_URL = `${BASE_URL}/notifications`;\n\nconst NotificationApi = {\n  // Get all notifications for a specific user\n  getNotificationsByUserId: async (userId: number) => {\n    try {\n      const response = await axios.get<NotificationResponse>(`${API_BASE_URL}/user/${userId}`);\n      return response.data.data; // Now it can safely access response.data.data\n    } catch (error: any) {\n      console.error('Failed to fetch notifications:', error);\n      throw new Error(error?.response?.data?.message || 'Error fetching notifications');\n    }\n  },\n\n  // Get read notifications for a specific user\n  getReadNotificationsByUserId: async (userId: number) => {\n    try {\n      const response = await axios.get<NotificationResponse>(`${API_BASE_URL}/user/${userId}/read`);\n      return response.data.data;\n    } catch (error: any) {\n      console.error('Failed to fetch read notifications:', error);\n      throw new Error(error?.response?.data?.message || 'Error fetching read notifications');\n    }\n  },\n\n  // Get unread notifications for a specific user\n  getUnreadNotificationsByUserId: async (userId: number) => {\n    try {\n      const response = await axios.get<NotificationResponse>(`${API_BASE_URL}/user/${userId}/unread`);\n      return response.data.data;\n    } catch (error: any) {\n      console.error('Failed to fetch unread notifications:', error);\n      throw new Error(error?.response?.data?.message || 'Error fetching unread notifications');\n    }\n  },\n\n  // Mark a notification as read\n  markNotificationAsRead: async (notificationId: number) => {\n    try {\n      const response = await axios.put(`${API_BASE_URL}/${notificationId}/read`);\n      return response.data.data; // Assuming the response is structured similarly\n    } catch (error: any) {\n      console.error('Failed to mark notification as read:', error);\n      throw new Error(error?.response?.data?.message || 'Error marking notification as read');\n    }\n  },\n\n  // Get notifications by type for a specific user\n  getNotificationsByType: async (userId: number, type: string) => {\n    try {\n      const response = await axios.get<NotificationResponse>(`${API_BASE_URL}/user/${userId}/type/${type}`);\n      return response.data.data;\n    } catch (error: any) {\n      console.error('Failed to fetch notifications by type:', error);\n      throw new Error(error?.response?.data?.message || 'Error fetching notifications by type');\n    }\n  },\n\n  // Send a promotion notification to all users\n  sendPromotionNotificationToAllUsers: async (promotionMessage: string) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/promotion`, { promotionMessage });\n      return response.data.data; // Assuming success response contains data field\n    } catch (error: any) {\n      console.error('Failed to send promotion notification:', error);\n      throw new Error(error?.response?.data?.message || 'Error sending promotion notification');\n    }\n  },\n};\n\nexport default NotificationApi;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/paymentApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[573,576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[573,576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[881,884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[881,884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1272,1275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1272,1275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1520,1523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1520,1523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1849,1852],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1849,1852],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2074,2077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2074,2077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2467,2470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2467,2470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { BASE_URL } from '../constants/constants';\nimport { Payment } from '../types/Payment';\n\nconst API_BASE_URL = `${BASE_URL}/payments`;\n\nexport interface PaymentRequest {\n  bookingId: number;\n  amount: number;\n}\n\nexport const createAndProcessPayment = async (\n  paymentRequest: PaymentRequest,\n  paymentMethod: string\n): Promise<string> => {\n  try {\n    const response = await axios.post<string>(\n      API_BASE_URL,\n      paymentRequest,\n      {\n        params: { paymentMethod },\n      }\n    );\n    return response.data;\n  } catch (error: any) {\n    throw new Error(error?.response?.data?.message || 'Error processing payment');\n  }\n};\n\nexport const getPaymentById = async (paymentId: number): Promise<Payment> => {\n  try {\n    const response = await axios.get<Payment>(`${API_BASE_URL}/${paymentId}`);\n    return response.data;\n  } catch (error: any) {\n    throw new Error(error?.response?.data?.message || 'Error retrieving payment');\n  }\n};\n\nexport const getPaymentsByBookingId = async (bookingId: number): Promise<Payment[]> => {\n  try {\n    const response = await axios.get<{ data: Payment[] }>(`${API_BASE_URL}/booking/${bookingId}`);\n    return response.data.data; // Return the data property inside the response\n  } catch (error: any) {\n    throw new Error(error?.response?.data?.message || 'Error retrieving payments for booking');\n  }\n};\n\n\nexport const getPaymentsByUserId = async (userId: number): Promise<Payment[]> => {\n  try {\n    const response = await axios.get<{ data: any[] }>(`${API_BASE_URL}/user/${userId}`);\n    \n    const mappedPayments: Payment[] = response.data.data.map((p) => ({\n      id: p.paymentId,\n      bookingId: p.bookingId,\n      amount: p.amountPaid,\n      status: p.paymentStatus,\n      transactionDate: p.paymentDateTime,\n    }));\n\n    return mappedPayments;\n  } catch (error: any) {\n    throw new Error(error?.response?.data?.message || 'Error retrieving payments for user');\n  }\n};\n\nexport const getAllPayments = async (): Promise<Payment[]> => {\n  try {\n    const response = await axios.get<{ data: any[] }>(`${API_BASE_URL}`);  // Adjust the endpoint as needed\n\n    // Map the response data to the Payment type\n    const mappedPayments: Payment[] = response.data.data.map((p) => ({\n      id: p.paymentId,\n      bookingId: p.bookingId,\n      amount: p.amountPaid,\n      status: p.paymentStatus,\n      transactionDate: p.paymentDateTime,\n    }));\n\n    return mappedPayments;\n  } catch (error: any) {\n    throw new Error(error?.response?.data?.message || 'Error retrieving all payments');\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/ratingApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":18,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":28,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":38,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":51,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { BASE_URL } from '../constants/constants';\nimport { Review } from '../types/Review';\n\n// Base URL for the API\nconst API_BASE_URL = `${BASE_URL}/reviews`;\n\ninterface CustomResponse<T> {\n  message: string;\n  data: T;\n}\n\n// Fetch all reviews\nexport const getAllReviews = async (): Promise<Review[]> => {\n  try {\n    const response = await axios.get<CustomResponse<Review[]>>(API_BASE_URL);\n    return response.data.data;  // Return the actual data\n  } catch (error) {\n    throw new Error('An error occurred while fetching reviews');\n  }\n};\n\n// Fetch a review by ID\nexport const getReviewById = async (id: number): Promise<Review> => {\n  try {\n    const response = await axios.get<CustomResponse<Review>>(`${API_BASE_URL}/${id}`);\n    return response.data.data;  // Return the actual data\n  } catch (error) {\n    throw new Error('An error occurred while fetching the review');\n  }\n};\n\n// Create a new review\nexport const createReview = async (review: Review): Promise<Review> => {\n  try {\n    const response = await axios.post<CustomResponse<Review>>(API_BASE_URL, review);\n    return response.data.data;  // Return the actual data\n  } catch (error) {\n    throw new Error('An error occurred while creating the review');\n  }\n};\n\n// Update an existing review\nexport const updateReview = async (\n  id: number,\n  review: Review\n): Promise<Review> => {\n  try {\n    const response = await axios.put<CustomResponse<Review>>(`${API_BASE_URL}/${id}`, review);\n    return response.data.data;  // Return the actual data\n  } catch (error) {\n    throw new Error('An error occurred while updating the review');\n  }\n};\n\n// Delete a review by ID\nexport const deleteReview = async (id: number): Promise<string> => {\n  try {\n    const response = await axios.delete<CustomResponse<string>>(`${API_BASE_URL}/${id}`);\n    return response.data.data;  // Return the actual data\n  } catch (error) {\n    throw new Error('An error occurred while deleting the review');\n  }\n};\n\n// Fetch reviews for a specific hotel\nexport const getReviewsForHotel = async (hotelId: number): Promise<Review[]> => {\n  try {\n    const response = await axios.get<CustomResponse<Review[]>>(`${API_BASE_URL}/hotel/${hotelId}`);\n    return response.data.data;  // Return the list of reviews directly\n  } catch (error) {\n    console.error('Error fetching reviews for this hotel:', error);\n    throw new Error('An error occurred while fetching reviews for this hotel');\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/roomApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/services/userApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":39,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":83,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":105,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3337,3340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3337,3340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":128,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":149,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\nimport { BASE_URL } from '../constants/constants';\nimport { LoginData, RegisterData, User } from '../types/User';\n\n// Base URL for the API\nconst API_BASE_URL = `${BASE_URL}/users`;\n\n// Register a new user\nexport const registerUser = async (userData: RegisterData) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/register`, userData);\n    return response.data; // Assuming the response will contain user data or a success message\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      // Handle known errors (e.g., 400, 401, etc.)\n      throw new Error(error.response?.data?.message || 'Registration failed.');\n    }\n    throw new Error('An unknown error occurred during registration.');\n  }\n};\n\nexport const loginUser = async (loginData: LoginData) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(loginData),\n      });\n  \n      const data = await response.json();\n  \n      if (response.ok && data?.data?.user) {\n        return { user: data.data.user, token: data.data.token };\n      } else {\n        throw new Error(data?.message || \"Invalid credentials or account not found.\");\n      }\n    } catch (err) {\n      throw new Error(\"An error occurred during login. Please try again.\");\n    }\n  };\n\n  export const getAllUsers = async (): Promise<{ users: User[] }> => {\n    try {\n      // Make a request to fetch all users\n      const response = await fetch(`${API_BASE_URL}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n  \n      const data = await response.json();\n  \n      if (response.ok && data?.data) {\n        return { users: data.data };  // Return users array\n      } else {\n        throw new Error(data?.message || \"No users found.\");\n      }\n    } catch (err) {\n      throw new Error(\"An error occurred while fetching user information. Please try again.\");\n    }\n  };  \n\n  export const getUserInfo = async (userId: string) => {\n    try {\n      // Make a request to fetch user information based on userId\n      const response = await fetch(`${API_BASE_URL}/${userId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n  \n      const data = await response.json();\n  \n      if (response.ok && data?.data) {\n        return { user: data.data };\n      } else {\n        throw new Error(data?.message || \"User not found.\");\n      }\n    } catch (err) {\n      throw new Error(\"An error occurred while fetching user information. Please try again.\");\n    }\n  };\n\n  // API call to fetch user by email\nexport const getUserByEmail = async (email: string) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/by-email/${email}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await response.json();\n\n    if (response.ok && data?.data) {\n      return { user: data.data };\n    } else {\n      throw new Error(data?.message || 'User not found.');\n    }\n  } catch (err) {\n    throw new Error('An error occurred while fetching user information. Please try again.');\n  }\n};\n\nexport const updateUser = async (id: string, userData: any) => {\n  try {\n    console.log(userData);\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userData),\n    });\n\n    const data = await response.json();\n\n    if (response.ok && data?.data) {\n      return { user: data.data };\n    } else {\n      throw new Error(data?.message || \"Failed to update user.\");\n    }\n  } catch (err) {\n    throw new Error(\"An error occurred while updating user information. Please try again.\");\n  }\n};\n\nexport const deleteUser = async (id: string) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    // Check if the response status is 204 (No Content)\n    if (response.status === 204) {\n      return { message: \"User deleted successfully.\" };\n    } else {\n      const data = await response.json();\n      throw new Error(data?.message || \"Failed to delete user.\");\n    }\n  } catch (err) {\n    throw new Error(\"An error occurred while deleting the user. Please try again.\");\n  }\n};\n\nexport const verifyUser = async (token: string) => {\n  const response = await fetch(`${API_BASE_URL}/verify`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ token }),\n  });\n\n  const message = await response.text();\n\n  if (response.ok) {\n    return message;\n  } else {\n    throw new Error(message);\n  }\n};\n\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/Booking.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/Hotels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/Notification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/Payment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/Review.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/Room.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/types/User.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/stayMate/stayMate/frontend/hotel-booking-frontend/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]