name: Java CI with Maven, SAST, and DAST

on:
  workflow_call:

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up JDK for Java build and tests
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build and Test with Maven
      - name: Build and Test with Maven
        run: |
          cd backend
          mvn -B package test --file pom.xml \
            -Ddb.url=jdbc:mysql://staymatems.c3geuwcoi6en.ap-southeast-1.rds.amazonaws.com:3307/staymateMS \
            -Ddb.username=admin \
            -Ddb.password=password

  # lint:
  #   name: Linting with JSHint
  #   runs-on: ubuntu-latest
  #   needs: build_and_test # Ensures linting runs after build_and_test

  #   strategy:
  #     matrix:
  #       node-version: [16.x]

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Installing JSHint
  #       run: |
  #         sudo npm install -g jshint

  #     - name: Change script permission
  #       run: |
  #         chmod +x scripts/jshint-script.sh

  #     - name: Run scan with JSHint
  #       run: scripts/jshint-script.sh

  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linting tool report
  #         path: |
  #           ./JSHint-report

  # # sast_scan:
  # #   name: SAST Scan (OWASP Dependency Check)
  # #   runs-on: ubuntu-latest
  # #   needs: build_and_test # Ensures this runs after build_and_test

  # #   strategy:
  # #     matrix:
  # #       node-version: [16.x]

  # #   steps:
  # #     # Checkout the repository
  # #     - uses: actions/checkout@v4

  # #     # Install OWASP Dependency Check
  # #     - name: OWASP Dependency Check
  # #       run: |
  # #         wget https://github.com/dependency-check/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
  # #         unzip dependency-check-12.1.0-release.zip

  # #     # Run OWASP Dependency Check scan on backend
  # #     - name: Run scan with ODC
  # #       run: |
  # #         dependency-check/bin/dependency-check.sh --project "Staymate" --scan ./backend --debug > ODC-report

  # #     # Archive SAST report
  # #     - name: Archive SAST Report
  # #       uses: actions/upload-artifact@v4
  # #       with:
  # #         name: sast-report
  # #         path: ./ODC-report

  # dast_scan:
  #   name: DAST Scan (ZAP)
  #   runs-on: ubuntu-latest
  #   needs: build_and_test # Ensures this runs after build_and_test

  #   strategy:
  #     matrix:
  #       node-version: [16.x]

  #   steps:
  #     # Checkout the repository
  #     - uses: actions/checkout@v4

  #     # Change permission for ZAP script
  #     - name: Change script permission
  #       run: chmod +x scripts/zap-script.sh

  #     # Run ZAP scan
  #     - name: Run ZAP Scan
  #       run: scripts/zap-script.sh

  #     # Archive DAST report
  #     - name: Archive DAST Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: zap-report
  #         path: ./zap_baseline_report.html

  deploy_to_ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build_and_test # Ensures deployment runs after DAST Scan

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up SSH for SCP
      - name: Set up SSH for SCP
        run: |
          mkdir -p ~/.ssh
          cp pemFiles/staymateApplication.pem ~/.ssh/staymateApplication.pem
          chmod 400 ~/.ssh/staymateApplication.pem
          # Add EC2 host to known hosts to avoid SSH prompt
          ssh-keyscan -H ec2-18-141-196-34.ap-southeast-1.compute.amazonaws.com >> ~/.ssh/known_hosts

      # Check if EC2 is reachable
      - name: Check if EC2 is reachable
        run: |
          echo "Checking if EC2 is reachable..."
          nc -zv ec2-18-141-196-34.ap-southeast-1.compute.amazonaws.com 22
        continue-on-error: true # Continue the deployment even if the check fails

      # SSH into EC2 to kill the process using port 4200
      - name: Kill process using port 4200
        run: |
          ssh -i ~/.ssh/staymateApplication.pem ec2-user@ec2-18-141-196-34.ap-southeast-1.compute.amazonaws.com << 'EOF'
            # Find and kill process using port 4200
            PID=$(lsof -t -i:4200)
            if [ -n "$PID" ]; then
              echo "Killing process $PID using port 4200"
              kill -9 $PID
            else
              echo "No process found using port 4200"
            fi
          EOF

      - name: Build and Install with Maven
        run: |
          cd backend
          mvn clean install --file pom.xml \
            -Ddb.url=jdbc:mysql://staymatems.c3geuwcoi6en.ap-southeast-1.rds.amazonaws.com:3307/staymateMS \
            -Ddb.username=admin \
            -Ddb.password=password

      # List files in target folder
      - name: List files in target folder
        run: |
          echo "Listing files in ./backend/target/"
          ls -al backend/target/

      # Copy files to EC2 using SCP
      - name: Copy files to EC2 using SCP
        run: |
          scp -i ~/.ssh/staymateApplication.pem backend/target/staymate-0.0.1-SNAPSHOT.jar ec2-user@ec2-18-141-196-34.ap-southeast-1.compute.amazonaws.com:/home/ec2-user
