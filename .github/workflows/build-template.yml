name: Java CI with Maven, SAST, and DAST

on:
  workflow_call:

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up JDK for Java build and tests
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Load Database Properties
        run: |
          if [ -f backend/src/main/resources/database-config.properties ]; then
            export DB_URL=$(grep '^db.url=' backend/src/main/resources/database-config.properties | cut -d '=' -f2-)
            export DB_USERNAME=$(grep '^db.username=' backend/src/main/resources/database-config.properties | cut -d '=' -f2)
            export DB_PASSWORD=$(grep '^db.password=' backend/src/main/resources/database-config.properties | cut -d '=' -f2)
            
            # Debug output
            echo "DB_URL=$DB_URL"
            echo "DB_USERNAME=$DB_USERNAME"
            echo "DB_PASSWORD=[HIDDEN]"
          else
            echo "Error: database-config.properties not found!"
            exit 1
          fi

      - name: Build and Test with Maven
        run: |
          cd backend
          mvn -B package test --file pom.xml \
            -Ddb.url="$DB_URL" \
            -Ddb.username="$DB_USERNAME" \
            -Ddb.password="$DB_PASSWORD"

  lint:
    name: Linting with JSHint
    runs-on: ubuntu-latest
    needs: build_and_test # Ensures linting runs after build_and_test

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v4

      - name: Installing JSHint
        run: |
          sudo npm install -g jshint

      - name: Change script permission
        run: |
          chmod +x scripts/jshint-script.sh

      - name: Run scan with JSHint
        run: scripts/jshint-script.sh

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linting tool report
          path: |
            ./JSHint-report

  # sast_scan:
  #   name: SAST Scan (OWASP Dependency Check)
  #   runs-on: ubuntu-latest
  #   needs: build_and_test # Ensures this runs after build_and_test

  #   strategy:
  #     matrix:
  #       node-version: [16.x]

  #   steps:
  #     # Checkout the repository
  #     - uses: actions/checkout@v4

  #     # Install OWASP Dependency Check
  #     - name: OWASP Dependency Check
  #       run: |
  #         wget https://github.com/dependency-check/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
  #         unzip dependency-check-12.1.0-release.zip

  #     # Run OWASP Dependency Check scan on backend
  #     - name: Run scan with ODC
  #       run: |
  #         dependency-check/bin/dependency-check.sh --project "Staymate" --scan ./backend --debug > ODC-report

  #     # Archive SAST report
  #     - name: Archive SAST Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: sast-report
  #         path: ./ODC-report

  dast_scan:
    name: DAST Scan (ZAP)
    runs-on: ubuntu-latest
    needs: build_and_test # Ensures this runs after build_and_test

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Change permission for ZAP script
      - name: Change script permission
        run: chmod +x scripts/zap-script.sh

      # Run ZAP scan
      - name: Run ZAP Scan
        run: scripts/zap-script.sh

      # Archive DAST report
      - name: Archive DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: ./zap_baseline_report.html

  deploy_to_ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [lint, dast_scan] # Ensures deployment runs after DAST Scan

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      - name: Load Application Host IP
        run: |
          export APP_HOST_IP=$(grep '^app.host_ip=' backend/src/main/resources/application.properties | cut -d '=' -f2)

          echo "APP_HOST_IP=$APP_HOST_IP"

      # Set up SSH for SCP
      - name: Set up SSH for SCP
        run: |
          mkdir -p ~/.ssh
          cp pemFiles/staymateApplication.pem ~/.ssh/staymateApplication.pem
          chmod 400 ~/.ssh/staymateApplication.pem
          # Add EC2 host to known hosts to avoid SSH prompt
          ssh-keyscan -H $APP_HOST_IP >> ~/.ssh/known_hosts

      # Check if EC2 is reachable
      - name: Check if EC2 is reachable
        run: |
          echo "Checking if EC2 is reachable..."
          nc -zv $APP_HOST_IP 22
        continue-on-error: true # Continue the deployment even if the check fails

      - name: Load Database Properties
        run: |
          export DB_URL=$(grep '^db.url=' backend/src/main/resources/database-config.properties | cut -d '=' -f2-)
          export DB_USERNAME=$(grep '^db.username=' backend/src/main/resources/database-config.properties | cut -d '=' -f2)
          export DB_PASSWORD=$(grep '^db.password=' backend/src/main/resources/database-config.properties | cut -d '=' -f2)
            
          echo "DB_URL=$DB_URL"
          echo "DB_USERNAME=$DB_USERNAME"
          echo "DB_PASSWORD=[HIDDEN]"

      - name: Build and Install with Maven
        run: |
          cd backend
          mvn clean install --file pom.xml \
            -Ddb.url="$DB_URL" \
            -Ddb.username="$DB_USERNAME" \
            -Ddb.password="$DB_PASSWORD"

      # List files in target folder
      - name: List files in target folder
        run: |
          echo "Listing files in ./backend/target/"
          ls -al backend/target/

      # Copy files to EC2 using SCP
      - name: Copy files to EC2 using SCP
        run: |
          scp -i ~/.ssh/staymateApplication.pem backend/target/staymate-0.0.1-SNAPSHOT.jar ec2-user@$APP_HOST_IP:/home/ec2-user

      # Run the jar in the background
      - name: SSH into EC2 and run the Jar in the background
        run: |
          ssh -i ~/.ssh/staymateApplication.pem ec2-user@$APP_HOST_IP << 'EOF'
            cd /home/ec2-user
            echo "Stopping old application..."
            PID=$(pgrep -f "staymate-0.0.1-SNAPSHOT.jar")
            if [ -n "$PID" ]; then
              echo "Killing process $PID"
              kill -9 $PID
            else
              echo "No existing process found."
            fi
            echo "Starting new application..."
            nohup java -jar staymate-0.0.1-SNAPSHOT.jar > staymate.log 2>&1 &
            disown
          EOF
