name: Java CI with Maven, and DAST

on:
  workflow_call:

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      db_url: ${{ steps.set-db.outputs.db_url }}
      db_username: ${{ steps.set-db.outputs.db_username }}
      db_password: ${{ steps.set-db.outputs.db_password }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Load Database Properties
        id: set-db
        run: |
          PROP_FILE=backend/src/main/resources/application-prod.properties

          if [ -f "$PROP_FILE" ]; then
            export DB_URL=$(grep '^db.url=' "$PROP_FILE" | cut -d '=' -f2-)
            export DB_USERNAME=$(grep '^db.username=' "$PROP_FILE" | cut -d '=' -f2-)
            export DB_PASSWORD=$(grep '^db.password=' "$PROP_FILE" | cut -d '=' -f2-)

            echo "DB_URL=$DB_URL"
            echo "DB_USERNAME=$DB_USERNAME"
            echo "DB_PASSWORD=[HIDDEN]"

            echo "db_url=$DB_URL" >> "$GITHUB_OUTPUT"
            echo "db_username=$DB_USERNAME" >> "$GITHUB_OUTPUT"
            echo "db_password=$DB_PASSWORD" >> "$GITHUB_OUTPUT"
          else
            echo "Error: $PROP_FILE not found!"
            exit 1
          fi

      - name: Build and Test with Maven
        run: |
          cd backend
          mvn -B verify --file pom.xml \
            -Ddb.url="${{ steps.set-db.outputs.db_url }}" \
            -Ddb.username="${{ steps.set-db.outputs.db_username }}" \
            -Ddb.password="${{ steps.set-db.outputs.db_password }}"

  dast_scan:
    name: DAST Scan (ZAP)
    runs-on: ubuntu-latest
    needs: build_and_test # Ensures this runs after build_and_test

    steps:
      - uses: actions/checkout@v4

      # Change permission for ZAP script
      - name: Change script permission
        run: chmod +x scripts/zap-script.sh

      # Run ZAP scan
      - name: Run ZAP Scan
        run: scripts/zap-script.sh

      # Archive DAST report
      - name: Archive DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: ./zap_baseline_report.html

  deploy_to_ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [build_and_test, dast_scan]

    steps:
      - uses: actions/checkout@v4

      - name: Load Application Host IP
        run: |
          export APP_HOST_IP=$(grep '^app.host_ip=' backend/src/main/resources/application-prod.properties | cut -d '=' -f2)
          echo "APP_HOST_IP=$APP_HOST_IP"
          echo "APP_HOST_IP=$APP_HOST_IP" >> $GITHUB_ENV

      - name: Set up SSH for SCP
        run: |
          mkdir -p ~/.ssh
          cp pemFiles/staymateApplication.pem ~/.ssh/staymateApplication.pem
          chmod 400 ~/.ssh/staymateApplication.pem
          ssh-keyscan -H ${{ env.APP_HOST_IP }} >> ~/.ssh/known_hosts

      - name: Check if EC2 is reachable
        run: |
          echo "Checking if EC2 is reachable..."
          nc -zv ${{ env.APP_HOST_IP }} 22
        continue-on-error: true

      - name: Build and Install with Maven
        run: |
          cd backend
          mvn clean install --file pom.xml \
            -Ddb.url="${{ needs.build_and_test.outputs.db_url }}" \
            -Ddb.username="${{ needs.build_and_test.outputs.db_username }}" \
            -Ddb.password="${{ needs.build_and_test.outputs.db_password }}"

      - name: List files in target folder
        run: |
          echo "Listing files in ./backend/target/"
          ls -al backend/target/

      - name: Upload JAR as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: staymate-backend
          path: backend/target/*.jar

      - name: Copy files to EC2 using SCP
        run: |
          JAR_FILE=$(ls backend/target/*.jar | grep -v "original" | head -n 1)
          scp -i ~/.ssh/staymateApplication.pem "$JAR_FILE" ec2-user@${{ env.APP_HOST_IP }}:/home/ec2-user

      - name: SSH into EC2 and run the Jar in the background
        run: |
          ssh -i ~/.ssh/staymateApplication.pem ec2-user@${{ env.APP_HOST_IP }} << 'EOF'
            cd /home/ec2-user
            echo "Stopping old application..."
            PID=$(pgrep -f "staymate-*.jar")
            if [ -n "$PID" ]; then
              echo "Killing process $PID"
              kill -9 $PID
            else
              echo "No existing process found."
            fi
            echo "Starting new application..."
            nohup java -jar staymate-*.jar > staymate.log 2>&1 &
            disown
          EOF
