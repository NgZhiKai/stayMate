name: Java CI with Maven, and DAST

on:
  workflow_call:
    inputs:
      spring_profile:
        required: false
        default: "prod"
        type: string

env:
  SPRING_PROFILE: ${{ inputs.spring_profile }}
  WORKING_DIR: backend

jobs:
  prepare_build:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      db_url: ${{ steps.set-db.outputs.db_url }}
      db_username: ${{ steps.set-db.outputs.db_username }}
      db_password: ${{ steps.set-db.outputs.db_password }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Load Database Properties
        id: set-db
        run: |
          PROP_FILE=${WORKING_DIR}/src/main/resources/application-${SPRING_PROFILE}.properties

          if [ -f "$PROP_FILE" ]; then
            export DB_URL=$(grep '^db.url=' "$PROP_FILE" | cut -d '=' -f2-)
            export DB_USERNAME=$(grep '^db.username=' "$PROP_FILE" | cut -d '=' -f2-)
            export DB_PASSWORD=$(grep '^db.password=' "$PROP_FILE" | cut -d '=' -f2-)

            echo "DB_URL=$DB_URL"
            echo "DB_USERNAME=$DB_USERNAME"
            echo "DB_PASSWORD=[HIDDEN]"

            echo "db_url=$DB_URL" >> "$GITHUB_OUTPUT"
            echo "db_username=$DB_USERNAME" >> "$GITHUB_OUTPUT"
            echo "db_password=$DB_PASSWORD" >> "$GITHUB_OUTPUT"
          else
            echo "Error: $PROP_FILE not found!"
            exit 1
          fi

  lint:
    name: Linting with JSHint
    runs-on: ubuntu-latest
    needs: prepare_build

    steps:
      - uses: actions/checkout@v4

      - name: Installing JSHint
        run: |
          sudo npm install -g jshint

      - name: Change script permission
        run: |
          chmod +x scripts/jshint-script.sh

      - name: Run scan with JSHint
        run: scripts/jshint-script.sh

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linting tool report
          path: |
            ./JSHint-report

  jacoco_report:
    name: JaCoCo Report Generation
    runs-on: ubuntu-latest
    needs: prepare_build

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Compile and Test with Maven
        run: |
          cd ${WORKING_DIR}
          mvn clean verify jacoco:report

      - name: List files in target folder
        run: |
          echo "Listing files in target/"
          ls -al ${WORKING_DIR}/target/site/jacoco/

      - name: Upload JaCoCo Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: ${{ env.WORKING_DIR }}/target/site/jacoco/

  deploy_to_ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [prepare_build, lint, jacoco_report]

    steps:
      - uses: actions/checkout@v4

      - name: Load Application Host IP
        run: |
          export APP_HOST_IP=$(grep '^app.host_ip=' ${WORKING_DIR}/src/main/resources/application-${SPRING_PROFILE}.properties | cut -d '=' -f2)
          echo "APP_HOST_IP=$APP_HOST_IP"
          echo "APP_HOST_IP=$APP_HOST_IP" >> $GITHUB_ENV

      - name: Set up SSH for SCP
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAYMATE_PEM }}" | base64 -d > ~/.ssh/staymateApplication.pem
          cat ~/.ssh/staymateApplication.pem
          chmod 400 ~/.ssh/staymateApplication.pem
          ssh-keyscan -H ${{ env.APP_HOST_IP }} >> ~/.ssh/known_hosts

      - name: Check if EC2 is reachable
        run: |
          echo "Checking if EC2 is reachable..."
          nc -zv ${{ env.APP_HOST_IP }} 22
        continue-on-error: true

      - name: Build and Install with Maven
        run: |
          cd ${WORKING_DIR}
          mvn clean install --file pom.xml \
            -Dspring.profiles.active=$SPRING_PROFILE \
            -Ddb.url="${{ needs.prepare_build.outputs.db_url }}" \
            -Ddb.username="${{ needs.prepare_build.outputs.db_username }}" \
            -Ddb.password="${{ needs.prepare_build.outputs.db_password }}"

      - name: List files in target folder
        run: |
          echo "Listing files in target/"
          ls -al ${WORKING_DIR}/target/

      - name: Upload JAR as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: staymate-backend
          path: ${{ env.WORKING_DIR }}/target/*.jar

      - name: Copy files to EC2 using SCP
        run: |
          JAR_FILE=$(ls ${WORKING_DIR}/target/*.jar | grep -v "original" | head -n 1)
          scp -i ~/.ssh/staymateApplication.pem "$JAR_FILE" ec2-user@${{ env.APP_HOST_IP }}:/home/ec2-user

      - name: SSH into EC2 and run the Jar in the background
        run: |
          ssh -i ~/.ssh/staymateApplication.pem ec2-user@${{ env.APP_HOST_IP }} << 'EOF'
            cd /home/ec2-user
            echo "Stopping old application..."
            PID=$(pgrep -f "staymate-.*\.jar")
            if [ -n "$PID" ]; then
              echo "Killing process $PID"
              kill -9 $PID
            else
              echo "No existing process found."
            fi
            echo "Starting new application..."
            nohup java -jar staymate-*.jar > staymate.log 2>&1 &
            disown
          EOF
